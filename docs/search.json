[
  {
    "objectID": "warmups/warmup0314.html",
    "href": "warmups/warmup0314.html",
    "title": "1. Generates the data",
    "section": "",
    "text": "1. Generates the data\n\nimport torch\n\ntorch.manual_seed(1234)\n\ndef perceptron_data(n_points = 300, noise = 0.2):\n    \n    y = torch.arange(n_points) &gt;= int(n_points/2)\n    X = y[:, None] + torch.normal(0.0, noise, size = (n_points,2))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n\n    # convert y from {0, 1} to {-1, 1}\n    y = 2*y - 1\n\n    return X, y\n\nX, y = perceptron_data(n_points = 300, noise = 0.2)\n\n\nX\n\n\ny\n\ntensor([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1])\n\n\n\n\n2. three class definitions\n\nimport torch\n\nclass LinearModel:\n\n    def __init__(self):\n        self.w = None \n\n    def score(self, X):\n        \"\"\"\n        Compute the scores for each data point in the feature matrix X. \n        The formula for the ith entry of s is s[i] = &lt;self.w, x[i]&gt;. \n\n        If self.w currently has value None, then it is necessary to first initialize self.w to a random value. \n\n        ARGUMENTS: \n            X, torch.Tensor: the feature matrix. X.size() == (n, p), \n            where n is the number of data points and p is the \n            number of features. This implementation always assumes \n            that the final column of X is a constant column of 1s. \n\n        RETURNS: \n            s torch.Tensor: vector of scores. s.size() = (n,)\n        \"\"\"\n        if self.w is None: \n            self.w = torch.rand((X.size()[1]))\n        \n        s = torch.matmul(X, self.w)\n        \n        return s\n\n    def predict(self, X):\n        \"\"\"\n        Compute the predictions for each data point in the feature matrix X. The prediction for the ith data point is either 0 or 1. \n\n        ARGUMENTS: \n            X, torch.Tensor: the feature matrix. X.size() == (n, p), \n            where n is the number of data points and p is the \n            number of features. This implementation always assumes \n            that the final column of X is a constant column of 1s. \n\n        RETURNS: \n            y_hat, torch.Tensor: vector predictions in {0.0, 1.0}. y_hat.size() = (n,)\n        \"\"\"\n        s = self.score(X)\n        \n        threshold = 0.5\n        y_hat = torch.where(s &gt;= threshold, torch.tensor(1.0), torch.tensor(0.0))\n        \n        return y_hat\n\nclass Perceptron(LinearModel):\n\n    def loss(self, X, y):\n        \"\"\"\n        Compute the misclassification rate. In the perceptron algorithm, the target vector y is assumed to have labels in {-1, 1}. A point i is classified correctly if its score s_i has the same sign as y_i. \n\n        ARGUMENTS: \n            X, torch.Tensor: the feature matrix. X.size() == (n, p), \n            where n is the number of data points and p is the \n            number of features. This implementation always assumes \n            that the final column of X is a constant column of 1s. \n\n            y, torch.Tensor: the target vector.  y.size() = (n,). In the perceptron algorithm, the possible labels for y are assumed to be {-1, 1}\n        \"\"\"\n\n        y_hat = self.predict(X)\n        \n        misc = torch.where(y_hat*y &gt; 0, False, True)\n        \n        misc_rate = (1.0*misc).mean()\n        \n        print(misc_rate)\n        \n        return misc_rate\n\n    def grad(self, X, y):\n        pass \n\nclass PerceptronOptimizer:\n\n    def __init__(self, model):\n        self.model = model \n    \n    def step(self, X, y):\n        \"\"\"\n        Compute one step of the perceptron update using the feature matrix X \n        and target vector y. \n        \"\"\"\n        pass\n    \n    \np = Perceptron()\ns = p.score(X)\nl = p.loss(X, y)\nprint(l == 0.5)\n\ntensor(True)"
  },
  {
    "objectID": "warmups/warmup0416.html",
    "href": "warmups/warmup0416.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "import torch\nfrom matplotlib import pyplot as plt \nplt.style.use('seaborn-v0_8-whitegrid')\n\ndef regression_data(n = 100, w = torch.Tensor([-0.7, 0.5]), x_max = 1):\n\n    x = torch.rand(n)*x_max\n    y = x*w[1] + w[0] + 0.05*torch.randn(n)\n    return x, y\n\nx, y = regression_data()\n# print(f\"{x=}\")\n# print(f\"{y=}\")\n\nplt.scatter(x, y, facecolors = \"none\", edgecolors = \"steelblue\")\nlabs = plt.gca().set(xlabel = r\"$x$\", ylabel = r\"$y$\")\n\n\n\n\n\n\n\n\n\nimport random\n\ndef SGD(x, y, alpha, epochs):\n\n    w_0 = 0.5\n    w_1 = 0.5\n    risk_vec = []\n\n    for t in range(1, epochs+1):\n        \n        # Permute the data indices in a random order.\n        indices = list(range(len(x)))\n        random.shuffle(indices)\n\n        # Then, for each data index i (in the permuted order), perform the following two updates:\n        for i in range(len(indices)):\n            \n            y_i = y[i]\n            x_i = x[i]\n           \n            # update w_0 and w_1 based on SGD formula\n            error = y_i - w_1 * x_i - w_0\n            w_0 += ((2 * alpha)/ t)* w_0 * error\n            w_1 += ((2 * alpha)/ t)* w_1 * error * x_i\n\n        # Calculate the risk for the current w_0 and w_1\n        little_risk = (y - w_1 * x - w_0)**2\n        risk = torch.mean(little_risk)\n        risk_vec.append(risk.item())\n        \n    return risk_vec\n\n\nplt.figure(figsize=(10, 5))\n\nalpha = 0.2\n\n# Plotting the empirical risk during a single epoch\nrisk_vec = SGD(x, y, alpha, 2) ## so we get risk after one update! (technically update twice)\nprint(f\"{risk_vec=}\")\n\nplt.subplot(1, 2, 1)\nplt.plot(range(1, len(risk_vec) + 1), risk_vec)\nplt.xlabel('Epoch')\nplt.ylabel('Empirical Risk')\nplt.title('Empirical Risk Evolution in a Single Epoch')\n\n# Plotting the empirical risk over 100 epochs\nrisk_vec= SGD(x, y, alpha, 100)\nprint(f\"{risk_vec=}\")\n\nplt.subplot(1, 2, 2)\nplt.plot(range(1, len(risk_vec) + 1), risk_vec)\nplt.xlabel('Epochs')\nplt.ylabel('Empirical Risk')\nplt.title('Empirical Risk Evolution over 100 Epochs')\n\nplt.tight_layout()\nplt.show()\n\nrisk_vec=[0.20837946236133575, 0.20835325121879578]\nrisk_vec=[0.20837946236133575, 0.20835325121879578, 0.2083527147769928, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316, 0.2083526998758316]"
  },
  {
    "objectID": "warmups/warmup0408.html",
    "href": "warmups/warmup0408.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "import urllib.request\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport torch\nimport numpy as np\n\ndef read_image(url):\n    urllib.request.urlretrieve(url, \"maru.png\")\n    img = Image.open(\"maru.png\")\n    return torch.tensor(np.array(img)/255).float()\n\nurl = \"https://github.com/middlebury-csci-0451/CSCI-0451-s24/blob/main/assets/img/figs/maru.png?raw=true\"\n\nimg = read_image(url)\n\ndef to_greyscale(im):\n    v = torch.tensor([0.2989, 0.5870, 0.1140])\n    return 1 - img[:,:,:3]@v\n\nimg = to_greyscale(img)\n\nplt.imshow(img, cmap = \"Greys\")\nno_ax = plt.gca().axis(\"off\")\n\nImplement kernel convolution for extracting features from images. Your implementation should accept a 2d array X (think of X as representing a greyscale image) and a square convolutional kernel K. Your implementation should operate using pure torch. You can use any zero-padding strategy, but you do need to explain what your strategy is when presenting.\n\nimport torch.nn.functional as F\nimport torch\n\ndef convolve2d(img, kernel):\n    \n    # padding is kernel row size//2\n    padding = kernel.shape[0] // 2\n    \n    # Apply zero-padding to the input image so that we can have 3 neighbors of our edge pixels\n    img_padded = torch.nn.functional.pad(img.float(), (padding, padding, padding, padding), mode='constant', value=0)\n    \n    # Initialize an empty tensor to store the convolution result\n    conv_output = torch.zeros_like(img)\n    \n    # loop through the rows and cols of the image\n    for i in range(padding, img_padded.shape[0] - padding):\n        for j in range(padding, img_padded.shape[1] - padding):\n            \n            # Go through and copy the image\n            region = img_padded[i - padding:i + padding + 1, j - padding:j + padding + 1]\n            \n            # multiply the region with the kernel and sum\n            conv_output[i - padding, j - padding] = torch.sum(region * kernel)\n    \n    return conv_output\n\n\n# from scipy.signal import convolve2d\n\nkernel = torch.tensor([[-1, -1, -1], [-1,  8, -1], [-1, -1, -1]])\n\nconvd = convolve2d(img, kernel)\n\nplt.imshow(convd, cmap = \"Greys\", vmin = 0, vmax = 0.1)\nplt.gca().axis(\"off\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me!",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post4/homework4.html",
    "href": "posts/post4/homework4.html",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "For this blog post I implemented the perceptron algorithm. I then ran several experiments to visualize the changes to my model each iteration and see the improvement of my loss. I investigated how the perceptron implementation changed when given linearly separable data vs not and 2 dimension vs more dimensional data. I also implemented mini-batch and ran experiments to see how this impacted algorithm outcomes. Through these steps, I learned the perceptron algorithm works and how that functionality can change to accommodate different data. Ultimately, I learned that the perceptron algorithm works well to address many different data forms by continuously updating the model based on misclassified points.\nLink to source code (perceptron.py)\nIn perceptron.py I implemented 5 functions: score, predict, loss, grad, and step. Here I will go through to briefly explain each function.\n\nscore: Calculate the score by taking the cross product of the data input and the weights.\npredict: Calculates y_hat where y_hat is 1 when the score is greater than or equal to 0, and 0 otherwise.\nloss: Finds loss by calculating mean of misclassified data points.\ngrad: Calculates score. If misclassified, returns gradient of cross product of data input and output \\[\\mathbb{1}\\left[s_i y_{i} &lt; 0 \\right] y_{i} \\mathbf{x}_{i}\\] Otherwise, return 0 gradient.\nstep: Calls and returns loss function. Adds gradient from grad function to model.\n\n\n%load_ext autoreload\n%autoreload 2\nfrom perceptron import Perceptron, PerceptronOptimizer\nfrom perceptron_minibatch import Perceptron_mini, PerceptronOptimizer_mini\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n\n\nFirst, I used data from warmup to create a plot of linearly separable data.\n\nimport torch\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\n\ntorch.manual_seed(1234)\n\ndef perceptron_data(n_points = 300, noise = 0.2, p_dims = 2):\n    \n    y = torch.arange(n_points) &gt;= int(n_points/2)\n    X = y[:, None] + torch.normal(0.0, noise, size = (n_points,p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n\n    # convert y from {0, 1} to {-1, 1}\n    y = 2*y - 1\n\n    return X, y\n\ndef plot_perceptron_data(X, y, ax):\n    targets = [-1, 1]\n    markers = [\"o\" , \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix,0], X[ix,1], s = 20,  c = y[ix], facecolors = \"none\", edgecolors = \"darkgrey\", cmap = \"BrBG\", vmin = -2, vmax = 2, alpha = 0.5, marker = markers[i])\n    ax.set(xlabel = r\"$x_1$\", ylabel = r\"$x_2$\")\n\nfig, ax = plt.subplots(1, 1)\nX, y = perceptron_data()\nplot_perceptron_data(X, y, ax)\n\n\n\n\n\n\n\n\nSee if perceptron.py code is functional by run the “minimal training loop” code from this section of the notes and eventually achieve loss = 0 on linearly separable data.\n\n# instantiate a model and an optimizer\np = Perceptron() \nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec = []\n\nn = X.size()[0]\n\nwhile loss &gt; 0: # only terminates if data is linearly separable\n    \n    # not part of the update: just for tracking our progress    \n    loss = p.loss(X, y) \n    loss_vec.append(loss)\n\n    # pick a random data point\n    i = torch.randint(n, size = (1,))\n    x_i = X[[i],:]\n    y_i = y[i]\n\n    # perform a perceptron update using the random data point\n    opt.step(x_i, y_i)\n\nThen I showed visualizations of the data, the separating line, and the evolution of the loss function during training.\nI copied the graph from notes in class to show the change of the loss in iterations of the perceptron algorithm.\n\ndef plot_loss(loss):\n    plt.style.use('seaborn-v0_8-whitegrid')\n    plt.figure(figsize=(10, 6))\n\n\n    plt.plot(loss, color = \"slategrey\")\n    plt.scatter(torch.arange(len(loss)), loss, color = \"slategrey\", s=5)\n    labs = plt.gca().set(xlabel = \"Perceptron Iteration\", ylabel = \"loss\")\n    \n    plt.title(f\"Final loss: {loss[len(loss)-1]:.3f}\")\n\n\nplot_loss(loss_vec)\n\n\n\n\n\n\n\n\nThis shows that the loss gradually decreases over the iterations and eventually reaches 0 (possible as the data is linearly separable).\nWe can then measure the accuracy of our predictions.\n\ndef find_accuracy(X, y):\n\n    predictions = p.predict(X)\n    \n    # convert predictions from {0, 1} to {-1, 1}\n    predictions = 2*predictions - 1\n    \n    correct_preds = (predictions == y).float()\n    accuracy = torch.mean(correct_preds)\n\n    print(f\"Accuracy: {accuracy.item()}\")\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nOur model has perfect accuracy.\n\n\n\nI changed class notes code to include 50 points that overlap the existing classes. This will mean that the data is not necessarily linearly separable like the data before.\n\nimport torch\nfrom matplotlib import pyplot as plt\n\nplt.style.use('seaborn-v0_8-whitegrid')\ntorch.manual_seed(1234)\n\ndef perceptron_data_overlap(n_points=300, noise=0.2, p_dims=2, overlap_points=50):\n   \n    y = torch.arange(n_points) &gt;= int(n_points / 2)\n    X = y[:, None] + torch.normal(0.0, noise, size=(n_points, p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n\n    # Add overlapping points within the range of existing points\n    overlap_X = torch.rand(overlap_points, p_dims) * (X.max() - X.min()) + X.min()\n    overlap_X = torch.cat((overlap_X, torch.ones((overlap_X.shape[0], 1))), 1)\n    X = torch.cat((X, overlap_X), dim=0)\n\n    # Convert y from {0, 1} to {-1, 1}\n    y = torch.cat((2 * y - 1, torch.ones(overlap_points, dtype=torch.long)))  # Label the overlapping points as class 1\n\n    return X, y\n\ndef plot_perceptron_data_overlap(X, y, ax):\n    targets = [-1, 1]\n    markers = [\"o\", \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix, 0], X[ix, 1], s=20, c=y[ix], facecolors=\"none\", edgecolors=\"darkgrey\", cmap=\"BrBG\", vmin=-2, vmax=2, alpha=0.5, marker=markers[i])\n    ax.set(xlabel=r\"$x_1$\", ylabel=r\"$x_2$\")\n\nfig, ax = plt.subplots(1, 1)\nX, y = perceptron_data_overlap()\nplot_perceptron_data_overlap(X, y, ax)\nplt.show()\n\n\n\n\n\n\n\n\nNext, I reran the perceptron algorithm. The difference with not linearly separable data is that I cannot run the algorithm until the loss is 0 as it will never be 0 for this data. Instead, I ran the data for 1000 iterations based on Pr.Chodrow’s advice in the blog post description. I also including code to visualize model updates.\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\nX, y = perceptron_data_overlap()\n\n# initialize for main loop\nloss_vec = []\n\nfor index in range(0, 1000):\n    \n    # pick a random data point\n    i = torch.randint(n, size = (1,))\n    x_i = X[[i],:]\n    y_i = y[i]\n\n    # make an optimization step -- this is where the update actually happens\n    local_loss = opt.step(x_i, y_i)\n\n    # also add the new loss to loss_vec for plotting below\n    loss = p.loss(X, y).item()\n    loss_vec.append(loss)\n\nI then reran code to show the updates of the loss.\n\nplot_loss(loss_vec)\n\n\n\n\n\n\n\n\nHere we can see that the loss decreases over time but does not reach 0 like in the linearly separable case.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.9628571271896362\n\n\nClose, but not perfect, accuracy.\n\n\n\nThe only difference here is that I created data with more than 5 dimensions.\n\nX, y = perceptron_data_overlap(n_points = 300, noise = 0.2, p_dims = 5)\n\nI ran the perceptron algorithm for 1000 iterations, without knowing if the data is linearly separable.\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec_dimen = []\n\nn = X.size()[0]\n\nfor index in range(0, 1000):\n    \n    i = torch.randint(n, size = (1,))\n    x_i = X[[i],:]\n    y_i = y[i]\n\n    # perform a perceptron update using the random data point\n    local_loss = opt.step(x_i, y_i)\n    \n    if (local_loss &gt; 0):\n\n        loss = p.loss(X, y).item()\n        loss_vec_dimen.append(loss)\n        \n\nI then visualized the loss over time.\n\nplot_loss(loss_vec_dimen)\n\n\n\n\n\n\n\n\nBecause the visualization of the loss vector shows that data never fully reaches a loss of 0 after 1000 iterations, we can conclude that the data is probably not linearly separable.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.9571428298950195\n\n\nClose, but not perfect, accuracy with non-linearly separable data.\n\n\n\nI then modified my perceptron.grad() method so that it accepts a submatrix of the feature matrix X of size k*p. I changed the code from:\ndef grad(self, X, y): # should correctly return the “update” part of the perceptron update\n    s = self.score(X)\n\n   # if misclassified, calculate update\n    if s*y &lt;= 0:            \n        update_val = X*y\n        return update_val[0,:]\n    else:\n        return torch.zeros_like(self.w)\nto\ndef grad(self, X, y): # should correctly return the “update” part of the perceptron update\n    s = self.score(X)\n    \n    # choose random learning rate\n    learning_rate = 0.3\n\n    # if misclassified, calculate update\n    misclass = s*y &lt;= 0\n    update_val_row = X*y[:,None]\n    \n    update_val = update_val_row * misclass[:,None]\n    \n    r = learning_rate * torch.mean(update_val, 0)\n    \n    return r\nThis change allowed the grad function to accept submatrices of the feature matrix X instead of just a single point.\n\n\n\nI then performed experiments and create visualizations to demonstrate the following:\nFor linearly separable data, when k = 1, mini-batch perceptron performs similarly to regular perceptron.\n\nX, y = perceptron_data()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nn = X.size()[0]\n\nwhile loss &gt; 0:\n    \n    # K is 1\n    k = 1\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement minibatch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nLoss goes to 0 after many iterations. And accuracy is perfect.\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nStill with k=1, the perceptron with mini-batch performs similarly to the normal perceptron with overlapping data.\n\nX, y = perceptron_data_overlap()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nfor index in range(0, 1500):\n    \n    # K is 1\n    k = 1\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement minibatch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nWe can see that the perceptron reaches a loss close to, but never equal to, zero. We also have nearly perfect accuracy.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.954285740852356\n\n\nFor linearly separable data when k = 10, mini-batch perceptron can still find a separating line in 2d.\n\nX, y = perceptron_data()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nwhile loss &gt; 0:\n    \n    # K is 10\n    k = 10\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement mini-batch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nHere the loss reaches zero with linearly separable data. We also have 100% accuracy.\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nWhen k = n (that is, the batch size is the size of the entire data set), mini-batch perceptron can converge even when the data is not linearly separable, provided that the learning rate is small enough.\n\nX, y = perceptron_data_overlap()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nn = X.size()[0]\n\nfor index in range(0, 1000):\n    \n    # K is n\n    k = n\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement mini-batch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nEven with overlapping data (not linearly separable) the algorithm converges with k=n at very close to 0 loss. Close to perfect accuracy.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.9485714435577393\n\n\n\n\n\n\n\nFor a single iteration of the perceptron algorithm the dot product is taken between w and one row of the feature matrix X, as each row represents a data point. The size of the row of the feature matrix is p, the number of dimensions of the data. Therefore a single iteration’s runtime is O(p).\n\n\n\nWith the mini-batch algorithm, we take the dot product between each data point in the batch instead of just one for each iteration. Therefore it is O(kp) for each algorithm iteration.\n\n\n\n\nThrough this blog post, I learned many important lessons in Machine Learning and computing in general. Firstly, I was able to implement the perceptron algorithm and understand the steps that go into updating a machine learning model. Through my experiments, I validates that my implementation were correct. I learned how to analyze the updates of perceptron and see how the algorithm functions on different data. I developed my abilities to visualize data and use those visualizations to understand both the input data and the algorithm itself. Ultimately, I was able to successfully implement and use the perceptron algorithm for linearly separable data, non-linearly separable data, and data with more than 2 dimensions. With mini-batch, I was able to demonstrate the algorithm functioned similarly to a single point with k=1, can still find a separating line in linearly separable data with k=10, and when k=n converge even without linearly separable data."
  },
  {
    "objectID": "posts/post4/homework4.html#abstract",
    "href": "posts/post4/homework4.html#abstract",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "For this blog post I implemented the perceptron algorithm. I then ran several experiments to visualize the changes to my model each iteration and see the improvement of my loss. I investigated how the perceptron implementation changed when given linearly separable data vs not and 2 dimension vs more dimensional data. I also implemented mini-batch and ran experiments to see how this impacted algorithm outcomes. Through these steps, I learned the perceptron algorithm works and how that functionality can change to accommodate different data. Ultimately, I learned that the perceptron algorithm works well to address many different data forms by continuously updating the model based on misclassified points.\nLink to source code (perceptron.py)\nIn perceptron.py I implemented 5 functions: score, predict, loss, grad, and step. Here I will go through to briefly explain each function.\n\nscore: Calculate the score by taking the cross product of the data input and the weights.\npredict: Calculates y_hat where y_hat is 1 when the score is greater than or equal to 0, and 0 otherwise.\nloss: Finds loss by calculating mean of misclassified data points.\ngrad: Calculates score. If misclassified, returns gradient of cross product of data input and output \\[\\mathbb{1}\\left[s_i y_{i} &lt; 0 \\right] y_{i} \\mathbf{x}_{i}\\] Otherwise, return 0 gradient.\nstep: Calls and returns loss function. Adds gradient from grad function to model.\n\n\n%load_ext autoreload\n%autoreload 2\nfrom perceptron import Perceptron, PerceptronOptimizer\nfrom perceptron_minibatch import Perceptron_mini, PerceptronOptimizer_mini\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload"
  },
  {
    "objectID": "posts/post4/homework4.html#implement-perceptron-on-linearly-separable-data",
    "href": "posts/post4/homework4.html#implement-perceptron-on-linearly-separable-data",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "First, I used data from warmup to create a plot of linearly separable data.\n\nimport torch\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\n\ntorch.manual_seed(1234)\n\ndef perceptron_data(n_points = 300, noise = 0.2, p_dims = 2):\n    \n    y = torch.arange(n_points) &gt;= int(n_points/2)\n    X = y[:, None] + torch.normal(0.0, noise, size = (n_points,p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n\n    # convert y from {0, 1} to {-1, 1}\n    y = 2*y - 1\n\n    return X, y\n\ndef plot_perceptron_data(X, y, ax):\n    targets = [-1, 1]\n    markers = [\"o\" , \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix,0], X[ix,1], s = 20,  c = y[ix], facecolors = \"none\", edgecolors = \"darkgrey\", cmap = \"BrBG\", vmin = -2, vmax = 2, alpha = 0.5, marker = markers[i])\n    ax.set(xlabel = r\"$x_1$\", ylabel = r\"$x_2$\")\n\nfig, ax = plt.subplots(1, 1)\nX, y = perceptron_data()\nplot_perceptron_data(X, y, ax)\n\n\n\n\n\n\n\n\nSee if perceptron.py code is functional by run the “minimal training loop” code from this section of the notes and eventually achieve loss = 0 on linearly separable data.\n\n# instantiate a model and an optimizer\np = Perceptron() \nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec = []\n\nn = X.size()[0]\n\nwhile loss &gt; 0: # only terminates if data is linearly separable\n    \n    # not part of the update: just for tracking our progress    \n    loss = p.loss(X, y) \n    loss_vec.append(loss)\n\n    # pick a random data point\n    i = torch.randint(n, size = (1,))\n    x_i = X[[i],:]\n    y_i = y[i]\n\n    # perform a perceptron update using the random data point\n    opt.step(x_i, y_i)\n\nThen I showed visualizations of the data, the separating line, and the evolution of the loss function during training.\nI copied the graph from notes in class to show the change of the loss in iterations of the perceptron algorithm.\n\ndef plot_loss(loss):\n    plt.style.use('seaborn-v0_8-whitegrid')\n    plt.figure(figsize=(10, 6))\n\n\n    plt.plot(loss, color = \"slategrey\")\n    plt.scatter(torch.arange(len(loss)), loss, color = \"slategrey\", s=5)\n    labs = plt.gca().set(xlabel = \"Perceptron Iteration\", ylabel = \"loss\")\n    \n    plt.title(f\"Final loss: {loss[len(loss)-1]:.3f}\")\n\n\nplot_loss(loss_vec)\n\n\n\n\n\n\n\n\nThis shows that the loss gradually decreases over the iterations and eventually reaches 0 (possible as the data is linearly separable).\nWe can then measure the accuracy of our predictions.\n\ndef find_accuracy(X, y):\n\n    predictions = p.predict(X)\n    \n    # convert predictions from {0, 1} to {-1, 1}\n    predictions = 2*predictions - 1\n    \n    correct_preds = (predictions == y).float()\n    accuracy = torch.mean(correct_preds)\n\n    print(f\"Accuracy: {accuracy.item()}\")\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nOur model has perfect accuracy."
  },
  {
    "objectID": "posts/post4/homework4.html#implement-perceptron-on-data-that-is-not-linearly-separable",
    "href": "posts/post4/homework4.html#implement-perceptron-on-data-that-is-not-linearly-separable",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "I changed class notes code to include 50 points that overlap the existing classes. This will mean that the data is not necessarily linearly separable like the data before.\n\nimport torch\nfrom matplotlib import pyplot as plt\n\nplt.style.use('seaborn-v0_8-whitegrid')\ntorch.manual_seed(1234)\n\ndef perceptron_data_overlap(n_points=300, noise=0.2, p_dims=2, overlap_points=50):\n   \n    y = torch.arange(n_points) &gt;= int(n_points / 2)\n    X = y[:, None] + torch.normal(0.0, noise, size=(n_points, p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n\n    # Add overlapping points within the range of existing points\n    overlap_X = torch.rand(overlap_points, p_dims) * (X.max() - X.min()) + X.min()\n    overlap_X = torch.cat((overlap_X, torch.ones((overlap_X.shape[0], 1))), 1)\n    X = torch.cat((X, overlap_X), dim=0)\n\n    # Convert y from {0, 1} to {-1, 1}\n    y = torch.cat((2 * y - 1, torch.ones(overlap_points, dtype=torch.long)))  # Label the overlapping points as class 1\n\n    return X, y\n\ndef plot_perceptron_data_overlap(X, y, ax):\n    targets = [-1, 1]\n    markers = [\"o\", \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix, 0], X[ix, 1], s=20, c=y[ix], facecolors=\"none\", edgecolors=\"darkgrey\", cmap=\"BrBG\", vmin=-2, vmax=2, alpha=0.5, marker=markers[i])\n    ax.set(xlabel=r\"$x_1$\", ylabel=r\"$x_2$\")\n\nfig, ax = plt.subplots(1, 1)\nX, y = perceptron_data_overlap()\nplot_perceptron_data_overlap(X, y, ax)\nplt.show()\n\n\n\n\n\n\n\n\nNext, I reran the perceptron algorithm. The difference with not linearly separable data is that I cannot run the algorithm until the loss is 0 as it will never be 0 for this data. Instead, I ran the data for 1000 iterations based on Pr.Chodrow’s advice in the blog post description. I also including code to visualize model updates.\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\nX, y = perceptron_data_overlap()\n\n# initialize for main loop\nloss_vec = []\n\nfor index in range(0, 1000):\n    \n    # pick a random data point\n    i = torch.randint(n, size = (1,))\n    x_i = X[[i],:]\n    y_i = y[i]\n\n    # make an optimization step -- this is where the update actually happens\n    local_loss = opt.step(x_i, y_i)\n\n    # also add the new loss to loss_vec for plotting below\n    loss = p.loss(X, y).item()\n    loss_vec.append(loss)\n\nI then reran code to show the updates of the loss.\n\nplot_loss(loss_vec)\n\n\n\n\n\n\n\n\nHere we can see that the loss decreases over time but does not reach 0 like in the linearly separable case.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.9628571271896362\n\n\nClose, but not perfect, accuracy."
  },
  {
    "objectID": "posts/post4/homework4.html#implement-perceptron-on-data-with-more-than-2-dimensions",
    "href": "posts/post4/homework4.html#implement-perceptron-on-data-with-more-than-2-dimensions",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "The only difference here is that I created data with more than 5 dimensions.\n\nX, y = perceptron_data_overlap(n_points = 300, noise = 0.2, p_dims = 5)\n\nI ran the perceptron algorithm for 1000 iterations, without knowing if the data is linearly separable.\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec_dimen = []\n\nn = X.size()[0]\n\nfor index in range(0, 1000):\n    \n    i = torch.randint(n, size = (1,))\n    x_i = X[[i],:]\n    y_i = y[i]\n\n    # perform a perceptron update using the random data point\n    local_loss = opt.step(x_i, y_i)\n    \n    if (local_loss &gt; 0):\n\n        loss = p.loss(X, y).item()\n        loss_vec_dimen.append(loss)\n        \n\nI then visualized the loss over time.\n\nplot_loss(loss_vec_dimen)\n\n\n\n\n\n\n\n\nBecause the visualization of the loss vector shows that data never fully reaches a loss of 0 after 1000 iterations, we can conclude that the data is probably not linearly separable.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.9571428298950195\n\n\nClose, but not perfect, accuracy with non-linearly separable data."
  },
  {
    "objectID": "posts/post4/homework4.html#implement-minibatch",
    "href": "posts/post4/homework4.html#implement-minibatch",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "I then modified my perceptron.grad() method so that it accepts a submatrix of the feature matrix X of size k*p. I changed the code from:\ndef grad(self, X, y): # should correctly return the “update” part of the perceptron update\n    s = self.score(X)\n\n   # if misclassified, calculate update\n    if s*y &lt;= 0:            \n        update_val = X*y\n        return update_val[0,:]\n    else:\n        return torch.zeros_like(self.w)\nto\ndef grad(self, X, y): # should correctly return the “update” part of the perceptron update\n    s = self.score(X)\n    \n    # choose random learning rate\n    learning_rate = 0.3\n\n    # if misclassified, calculate update\n    misclass = s*y &lt;= 0\n    update_val_row = X*y[:,None]\n    \n    update_val = update_val_row * misclass[:,None]\n    \n    r = learning_rate * torch.mean(update_val, 0)\n    \n    return r\nThis change allowed the grad function to accept submatrices of the feature matrix X instead of just a single point."
  },
  {
    "objectID": "posts/post4/homework4.html#minibatch-perceptron-experiments",
    "href": "posts/post4/homework4.html#minibatch-perceptron-experiments",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "I then performed experiments and create visualizations to demonstrate the following:\nFor linearly separable data, when k = 1, mini-batch perceptron performs similarly to regular perceptron.\n\nX, y = perceptron_data()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nn = X.size()[0]\n\nwhile loss &gt; 0:\n    \n    # K is 1\n    k = 1\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement minibatch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nLoss goes to 0 after many iterations. And accuracy is perfect.\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nStill with k=1, the perceptron with mini-batch performs similarly to the normal perceptron with overlapping data.\n\nX, y = perceptron_data_overlap()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nfor index in range(0, 1500):\n    \n    # K is 1\n    k = 1\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement minibatch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nWe can see that the perceptron reaches a loss close to, but never equal to, zero. We also have nearly perfect accuracy.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.954285740852356\n\n\nFor linearly separable data when k = 10, mini-batch perceptron can still find a separating line in 2d.\n\nX, y = perceptron_data()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\nloss = 1.0\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nwhile loss &gt; 0:\n    \n    # K is 10\n    k = 10\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement mini-batch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nHere the loss reaches zero with linearly separable data. We also have 100% accuracy.\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nWhen k = n (that is, the batch size is the size of the entire data set), mini-batch perceptron can converge even when the data is not linearly separable, provided that the learning rate is small enough.\n\nX, y = perceptron_data_overlap()\n\n\ntorch.manual_seed(1234567)\n\n# initialize a perceptron \np = Perceptron()\nopt = PerceptronOptimizer(p)\n\n# for keeping track of loss values\nloss_vec_mini = []\n\nn = X.size()[0]\n\nfor index in range(0, 1000):\n    \n    # K is n\n    k = n\n    \n    # get a random submatrix of the feature matrix X and target vector y to implement mini-batch\n    ix = torch.randperm(X.size(0))[:k]\n    x_i = X[ix,:]\n    y_i = y[ix]\n    \n    opt.step(x_i, y_i)\n    \n    loss = p.loss(X, y).item()\n    loss_vec_mini.append(loss)\n\n\nplot_loss(loss_vec_mini)\n\n\n\n\n\n\n\n\nEven with overlapping data (not linearly separable) the algorithm converges with k=n at very close to 0 loss. Close to perfect accuracy.\n\nfind_accuracy(X, y)\n\nAccuracy: 0.9485714435577393"
  },
  {
    "objectID": "posts/post4/homework4.html#discussion-question",
    "href": "posts/post4/homework4.html#discussion-question",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "For a single iteration of the perceptron algorithm the dot product is taken between w and one row of the feature matrix X, as each row represents a data point. The size of the row of the feature matrix is p, the number of dimensions of the data. Therefore a single iteration’s runtime is O(p).\n\n\n\nWith the mini-batch algorithm, we take the dot product between each data point in the batch instead of just one for each iteration. Therefore it is O(kp) for each algorithm iteration."
  },
  {
    "objectID": "posts/post4/homework4.html#conclusion",
    "href": "posts/post4/homework4.html#conclusion",
    "title": " Implementing the Perceptron Algorithm ",
    "section": "",
    "text": "Through this blog post, I learned many important lessons in Machine Learning and computing in general. Firstly, I was able to implement the perceptron algorithm and understand the steps that go into updating a machine learning model. Through my experiments, I validates that my implementation were correct. I learned how to analyze the updates of perceptron and see how the algorithm functions on different data. I developed my abilities to visualize data and use those visualizations to understand both the input data and the algorithm itself. Ultimately, I was able to successfully implement and use the perceptron algorithm for linearly separable data, non-linearly separable data, and data with more than 2 dimensions. With mini-batch, I was able to demonstrate the algorithm functioned similarly to a single point with k=1, can still find a separating line in linearly separable data with k=10, and when k=n converge even without linearly separable data."
  },
  {
    "objectID": "posts/post2/hw2.html",
    "href": "posts/post2/hw2.html",
    "title": " ‘Optimal’ Decision-Making ",
    "section": "",
    "text": "In this blog post I trained a Logistic Regression function to predict the outcome of a loan. Through iterative comparison, I found that age, loan percent income, and person home ownership were the optimal features to predict loan status. Using these features to train my model, I then measured the optimal threshold by finding the highest possible gain for the bank. For these calculations I used the cost functions given by Professor Phil that depend on interest rate and loan amount. I then evaluated my model to see how the predictions changed based on different characteristics and calculated fairness based on my chosen definition.\nI found that the bank stood to gain $7931919.35735091 in total, or $1384.0375776218652 per loan. This was based on an optimal threshold of 2.857653939857805. My trained model predicted that older people and people with lower incomes were less likely to be given a loan. It also predicted default rate as highest for debt consolidation, then medical expenses, personal, education, and loan intent. Based on my choice of Error Rate Parity as a definition of model fairness, I determined that my model made fair decisions based on medical expense loan intent."
  },
  {
    "objectID": "posts/post2/hw2.html#introduction",
    "href": "posts/post2/hw2.html#introduction",
    "title": " ‘Optimal’ Decision-Making ",
    "section": "",
    "text": "In this blog post I trained a Logistic Regression function to predict the outcome of a loan. Through iterative comparison, I found that age, loan percent income, and person home ownership were the optimal features to predict loan status. Using these features to train my model, I then measured the optimal threshold by finding the highest possible gain for the bank. For these calculations I used the cost functions given by Professor Phil that depend on interest rate and loan amount. I then evaluated my model to see how the predictions changed based on different characteristics and calculated fairness based on my chosen definition.\nI found that the bank stood to gain $7931919.35735091 in total, or $1384.0375776218652 per loan. This was based on an optimal threshold of 2.857653939857805. My trained model predicted that older people and people with lower incomes were less likely to be given a loan. It also predicted default rate as highest for debt consolidation, then medical expenses, personal, education, and loan intent. Based on my choice of Error Rate Parity as a definition of model fairness, I determined that my model made fair decisions based on medical expense loan intent."
  },
  {
    "objectID": "posts/post6/homework6.html",
    "href": "posts/post6/homework6.html",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\nfrom NewtonOptimizer import NewtonOptimizer\nimport sys\nsys.path.append('/Users/lindseyschweitzer/Documents/GitHub/lfschweitzer.github.io/')\n\nfrom posts.post5.logistic import LogisticRegression, GradientDescentOptimizer"
  },
  {
    "objectID": "posts/post6/homework6.html#data-generation",
    "href": "posts/post6/homework6.html#data-generation",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "Data Generation",
    "text": "Data Generation\nBefore doing any experiments, I had to generate data for a classification problem.\n\nimport torch\n\ndef classification_data(n_points = 300, noise = 0.2, p_dims = 2):\n    \n    y = torch.arange(n_points) &gt;= int(n_points/2)\n    y = 1.0*y\n    X = y[:, None] + torch.normal(0.0, noise, size = (n_points,p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n    \n    return X, y\n\nPlot the data\n\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\n\ndef plot_classification_data(X, y, ax):\n    targets = [0, 1]\n    markers = [\"o\" , \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix,0], X[ix,1], s = 20,  c = y[ix], facecolors = \"none\", edgecolors = \"darkgrey\", cmap = \"BrBG\", vmin = -2, vmax = 2, alpha = 0.5, marker = markers[i])\n    ax.set(xlabel = r\"$x_1$\", ylabel = r\"$x_2$\")\n    \n    \nfig, ax = plt.subplots(1, 1)\n\nX, y = classification_data(n_points= 500, noise= 0.5, p_dims= 2)\nplot_classification_data(X, y, ax)\n\n\n\n\n\n\n\n\nCode to graph a straight line\n\ndef draw_line(w, x_min, x_max, ax, **kwargs):\n    w_ = w.flatten()\n    x = torch.linspace(x_min, x_max, 101)\n    y = -(w_[0]*x + w_[2])/w_[1]\n    l = ax.plot(x, y, **kwargs)"
  },
  {
    "objectID": "posts/post6/homework6.html#when-alpha-is-chosen-appropriately-newtons-method-converges-to-the-correct-choice-of-w.",
    "href": "posts/post6/homework6.html#when-alpha-is-chosen-appropriately-newtons-method-converges-to-the-correct-choice-of-w.",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "1. When alpha is chosen appropriately, Newton’s method converges to the correct choice of w.",
    "text": "1. When alpha is chosen appropriately, Newton’s method converges to the correct choice of w.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = NewtonOptimizer(LR)\n\n# initialize for main loop\nloss_vec = []\n\nfor index in range(5000):\n    \n    opt.step(X, y, alpha = 0.5)\n    \n    loss = LR.loss(X, y).item()\n    loss_vec.append(loss)\n\n\ndef find_accuracy(X, y):\n\n    predictions = LR.predict(X)\n    correct_preds = (predictions == y).float()\n    accuracy = torch.mean(correct_preds)\n\n    print(f\"Accuracy: {accuracy.item()}\")\n\nfind_accuracy(X, y)\n\nAccuracy: 0.8980000019073486\n\n\n\nfig, ax = plt.subplots(1, 1)\n\nplot_classification_data(X, y, ax)\n\ndraw_line(LR.w, x_min=-1, x_max=2, ax=ax, color=\"black\")\nax.set_title(f\"loss = {loss:.3f}\")\nax.set(xlim=(-1, 2), ylim=(-1, 2))\n\n\n\n\n\n\n\n\nPlot the loss over time over the 2000 iterations.\n\nimport numpy as np\n\ndef plot_loss(loss, label= \"\"):\n    plt.style.use('seaborn-v0_8-whitegrid')\n    plt.figure(figsize=(10, 6))\n\n    \n    plt.plot(loss, color = \"blue\", label=label)\n    plt.scatter(torch.arange(len(loss)), loss, color = \"slategrey\", s=5)\n    plt.gca().set(xlabel = \"Perceptron Iteration (Updates Only)\", ylabel = \"loss\")\n    \n    plt.title(f\"Final loss: {loss[len(loss)-1]:.3f}\")\n\nplot_loss(loss_vec)\n\n\n\n\n\n\n\n\nFrom these visualizations, we can see that the weights chosen lead to high accuracy rates and a line that is pretty good at separating the data. We can also see that the loss converges over time."
  },
  {
    "objectID": "posts/post6/homework6.html#under-at-least-some-circumstances-newtons-method-can-converge-much-faster-than-standard-gradient-descent-in-the-sense-of-decreasing-the-empirical-risk.",
    "href": "posts/post6/homework6.html#under-at-least-some-circumstances-newtons-method-can-converge-much-faster-than-standard-gradient-descent-in-the-sense-of-decreasing-the-empirical-risk.",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "2. Under at least some circumstances, Newton’s method can converge much faster than standard gradient descent, in the sense of decreasing the empirical risk.",
    "text": "2. Under at least some circumstances, Newton’s method can converge much faster than standard gradient descent, in the sense of decreasing the empirical risk.\nFirst lets do standard gradient descent so we can compare it to Newton’s method later.\n\nLR_Stand = LogisticRegression() \nopt = GradientDescentOptimizer(LR_Stand)\n\n# initialize for main loop\nloss_vec_stand = []\n\nfor index in range(2000):\n    \n    # for vanilla gradient descent, alpha must be sufficiently small and beta must be 0\n    opt.step(X, y, alpha = 0.5, beta = 0)\n    loss = LR_Stand.loss(X, y).item()\n    loss_vec_stand.append(loss)\n\n\nfind_accuracy(X, y)\n\nAccuracy: 0.8980000019073486\n\n\nNow, lets show do Newton’s method to compare the decrease in empirical risk.\n\n# Use the same data as before\n\n# initialize a Logistic Regression and use Newton Optimizer\nLR_Newt = LogisticRegression() \nopt = NewtonOptimizer(LR_Newt)\n\nloss_vec_newt = []\n\nfor index in range(2000):\n    \n    opt.step(X, y, alpha = 50)\n    \n    loss = LR_Newt.loss(X, y).item()\n    loss_vec_newt.append(loss)\n\n\nfind_accuracy(X, y)\n\nAccuracy: 0.8980000019073486\n\n\nNow let’s compare the decrease in empirical risk:\n\nplt.plot(loss_vec_stand, label='Standard Gradient Descent')\nplt.plot(loss_vec_newt, color='green', label=\"Newton's Method\")\n\n\n# use log y axis\nplt.semilogy()\nplt.xlabel(\"Iterations\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\n\n\n\n\n\n\n\nHere we can see that Newton’s method converges at a much faster rate than Standard Gradient Descent with the same data and learning rate."
  },
  {
    "objectID": "posts/post6/homework6.html#if-alpha-is-too-large-newtons-method-fails-to-converge.",
    "href": "posts/post6/homework6.html#if-alpha-is-too-large-newtons-method-fails-to-converge.",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "3. If alpha is too large, Newton’s method fails to converge.",
    "text": "3. If alpha is too large, Newton’s method fails to converge.\n\n# initialize a Logistic Regression and Newton Optimizer\nLR = LogisticRegression() \nopt = NewtonOptimizer(LR)\n\n# initialize for main loop\nloss_vec_alpha = []\n\nfor index in range(200):\n    \n    opt.step(X, y, alpha = 1010)\n    \n    loss = LR.loss(X, y).item()\n    loss_vec_alpha.append(loss)\n\n_LinAlgError: linalg.inv: The diagonal element 1 is zero, the inversion could not be completed because the input matrix is singular.\n\n\n\nplot_loss(loss_vec_alpha)\n\n\n\n\n\n\n\n\nWith a high learning rate, we can see that Newton’s method does not cause empirical risk to converge, but instead after some time it begins to increase!"
  },
  {
    "objectID": "posts/post6/homework6.html#operation-counting",
    "href": "posts/post6/homework6.html#operation-counting",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "Operation Counting",
    "text": "Operation Counting\nThe goal is to answer these two questions:\n\nDoes Standard Gradient Descent or Newton’s method require less computational units?\nAnd, when p becomes very large, does it ever pay off to use Newton’s Method?\n\nTo answer these questions we make this set of assumptions that methods have these computational costs:\n\nComputing loss –&gt; c\nComputing grad –&gt; 2c\nComputing H –&gt; pc\nInverting pxp –&gt; \\(k_1p^\\gamma\\) where \\(2 \\leq \\gamma &lt;3\\)\nMultiplying by H –&gt; \\(k_2p^{2}\\)\n\nTo make a singular step for Newton’s Method:\n\nCompute loss: c\nFor \\(t_\\mathrm{nm}\\) steps:\n\nCompute grad: 2c\nCompute H : pc\nInvert H: \\(k_1p^\\gamma\\)\nMultiply by H: \\(k_2p^{2}\\)\n\n\nTotal time: O(c + \\(t_\\mathrm{nm}\\) * (2c + pc + \\(k_1p^\\gamma\\) + \\(k_2p^{2}\\)))\nTo make a singular step for Standard Gradient Descent:\n\nCompute loss: c\nFor \\(t_\\mathrm{gd}\\) steps:\n\nCompute grad: 2c\n\n\nTotal time: O(c + \\(t_\\mathrm{gd}\\) * 2c)\nIf O(GD) = c + \\(t_\\mathrm{gd}\\) * 2c, and O(NM) = c + \\(t_\\mathrm{nm}\\) * (2c + pc + \\(k_1p^\\gamma\\) + \\(k_2p^{2}\\)), then \\(\\frac{t_\\mathrm{nm}}{t_\\mathrm{gd}} = \\frac{2c + pc + k_1p^\\gamma + k_2p^{2}}{2c}\\).\nTherefore, \\(t_\\mathrm{nm}\\) is more computationally expensive than \\(t_\\mathrm{gd}\\) by \\(1 + \\frac{p}{2} + \\frac{k_1p^\\gamma}{2c} +  \\frac{k_2p^{2}}{2c}\\). The growth is determined by \\(k_1p^\\gamma\\) + \\(k_2p^{2}\\). Therefore, as p gets much larger, \\(t_\\mathrm{nm}\\) increases exponentially. \\(t_\\mathrm{sg}\\) does not depend on p and therefore would be smaller than \\(t_\\mathrm{nm}\\)."
  },
  {
    "objectID": "posts/post6/homework6.html#conclusion",
    "href": "posts/post6/homework6.html#conclusion",
    "title": " Newton’s Method for Logistic Regression ",
    "section": "Conclusion",
    "text": "Conclusion\nCreating this blog post allowed me to understand the implementation and specific applications of Newton’s method. I was able to visualize how it is able to converge, even at a faster rate than Standard Gradient Descent under certain circumstances. However, I was also able to understand the circumstances in which Newton’s method fails. If alpha is too large Newton’s method will fail to converge. Additionally, Newton’s method has a much higher time complexity which can become significant when p is large.\nThrough the experience of implementing this blog post, I was able to understand how different machine learning methods could be applied depending on the specifics of the data to be trained on. With large amounts of data, like many machine learning problems today, Newton’s method might be too large to compute. Overall, I was able to learn more about Machine learning models and how to apply them to different data."
  },
  {
    "objectID": "posts/post1/homework1.html",
    "href": "posts/post1/homework1.html",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "The Palmer Penguins data set was collected by Dr. Kristen Gorman and the Palmer Station, Anartica LTER, a member of the Long Term Ecological Research Network. It contains physiological measurements from three species of penguins and is widely used in data analysis. My goal with homework 1 is to identify three characteristics (two quantitative and one qualitative) and a model, which I then train, to identify penguin species with 100% testing accuracy.\n\nimport pandas as pd\n\ntrain_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/train.csv\"\ntrain = pd.read_csv(train_url)\n\n\ntrain.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0809\n31\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN63A1\nYes\n11/24/08\n40.9\n16.6\n187.0\n3200.0\nFEMALE\n9.08458\n-24.54903\nNaN\n\n\n1\nPAL0809\n41\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN74A1\nYes\n11/24/08\n49.0\n19.5\n210.0\n3950.0\nMALE\n9.53262\n-24.66867\nNaN\n\n\n2\nPAL0708\n4\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN32A2\nYes\n11/27/07\n50.0\n15.2\n218.0\n5700.0\nMALE\n8.25540\n-25.40075\nNaN\n\n\n3\nPAL0708\n15\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN38A1\nYes\n12/3/07\n45.8\n14.6\n210.0\n4200.0\nFEMALE\n7.79958\n-25.62618\nNaN\n\n\n4\nPAL0809\n34\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN65A2\nYes\n11/24/08\n51.0\n18.8\n203.0\n4100.0\nMALE\n9.23196\n-24.17282\nNaN\n\n\n\n\n\n\n\n\n\n\nTo start my exploration into the penguin data, I first sough to understand the data by plotting it\n\nimport seaborn as sns\n\n# body mass vs specie with colors for gender\n\n# replace the column with the first word in each entry\ntrain[\"Species\"] = train[\"Species\"].str.split().str.get(0)\n\nsns.catplot(data=train, x=\"Species\", y=\"Body Mass (g)\", hue=\"Sex\")\n\n/Users/lindseyschweitzer/anaconda3/envs/ml-0451/lib/python3.9/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/lindseyschweitzer/anaconda3/envs/ml-0451/lib/python3.9/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThis plot shows penguins as points colored by sex, with species as the x-axis and body mass (in grams) on the y-axis. This plot displays that on average, male penguins are larger than female penguins. It also shows a trend of Gentoo species of penguins larger than Chinstrap or Adelie penguins- who are relatively similar in size. This indicates that Body Mass (g) could potentially be a useful indicator in indicating species type. It is also important to note that the separation of gender allows us to make these assertions. Gento male penguins are generally larger than Adelie male penguins and the same follows with female penguins of these same two species. However, Gentoo female penguins are roughly the same size as Adelie male penguins. Therefore gender might be a useful tool in predicting penguin species.\n\nsns.catplot(data=train, kind=\"violin\", x=\"Delta 13 C (o/oo)\", y=\"Island\", hue=\"Species\")\n\n\n\n\n\n\n\n\nThis plot shows the penguins of different species with different colors graphed on Delta 13 C (o/oo) and Island location. Delta 13(o/oo) is an interesting indicator as it is widely used as an indicator of diet especially in reference to vegetation. This therefore shows that there could be a large difference in diet between Chinstrap and the other two species of penguins. Adelie penguins are present in all three islands whereas Gentoo and Chinstrap penguins are isolated to one of the three. Therefore Island could be a helpful indicator of species type, but probably would not be indicative by itself.\n\ntable = train.groupby(['Species', 'Sex']).aggregate({'Culmen Length (mm)' : ['min', 'max','mean']})\nprint(table)\n\n                 Culmen Length (mm)                 \n                                min   max       mean\nSpecies   Sex                                       \nAdelie    FEMALE               34.0  42.2  37.426415\n          MALE                 34.6  46.0  40.404918\nChinstrap FEMALE               40.9  58.0  46.722581\n          MALE                 49.0  55.8  51.334615\nGentoo    .                    44.5  44.5  44.500000\n          FEMALE               40.9  50.5  45.455102\n          MALE                 44.4  55.9  49.006818\n\n\nThis table indicates that on average male penguins have longer Culmen Length than their female counterparts. Male Gentoo penguins have longer Culmens then male Chinstraps who have longer Culmens than male Adelie penguins while the order for female penguins descends for Chinstrap, Gentoo, then Adelie. These distinctions could serve useful in training our model to differentiate species. It also serves to note that the gender distinction matters when comparing species.\n\n\n\nI then attempted to find three features of the data (one qualitative and two quantitative) and train a model on these features that achieves 100% testing accuracy.\nFirst I did data preparation to prepare the quantitative columns of the data\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train[\"Species\"])\n\ndef prepare_data(df):\n  df = df.drop([\"studyName\", \"Sample Number\", \"Individual ID\", \"Date Egg\", \"Comments\", \"Region\"], axis = 1)\n  df = df[df[\"Sex\"] != \".\"]\n  df = df.dropna()\n  y = le.transform(df[\"Species\"])\n  df = df.drop([\"Species\"], axis = 1)\n  df = pd.get_dummies(df)\n  return df, y\n\nX_train, y_train = prepare_data(train)\n\n\nX_train.head()\n\n\n\n\n\n\n\n\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nIsland_Biscoe\nIsland_Dream\nIsland_Torgersen\nStage_Adult, 1 Egg Stage\nClutch Completion_No\nClutch Completion_Yes\nSex_FEMALE\nSex_MALE\n\n\n\n\n0\n40.9\n16.6\n187.0\n3200.0\n9.08458\n-24.54903\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n1\n49.0\n19.5\n210.0\n3950.0\n9.53262\n-24.66867\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n2\n50.0\n15.2\n218.0\n5700.0\n8.25540\n-25.40075\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n3\n45.8\n14.6\n210.0\n4200.0\n7.79958\n-25.62618\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n4\n51.0\n18.8\n203.0\n4100.0\n9.23196\n-24.17282\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n\n\n\n\n\nI completed an exhaustive iterative search to find the best markers. I used cross validation one each combination of one qualitative and two quantitative column with different models keeping track of the best score for each model. In terms of models I used a Logistic Regression, Decision Tree Classifier, SVC, and Random Forrest Classifier. For the Decision Tree Classifier and the Random Forrest Classifier I used grid search across the amount of parameters to identify the optimal maximum depth. For SVC I used grid search to find the optimal value for gamma across a wide array of numbers. With the best markers of each model, I also saved the columns of the best score.\n\nfrom itertools import combinations\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\n\nall_qual_cols = [\"Clutch Completion\", \"Sex\", \"Island\",'Stage_Adult, 1 Egg Stage']\nall_quant_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)','Body Mass (g)','Delta 15 N (o/oo)','Delta 13 C (o/oo)',]\n\nbestLRScore = 0.0\nbestLRCols=[]\ncol_combos = []\n\n\nbestDTCScore = 0.0\nbestDTCCols=[]\n\nbestSVMScore = 0.0\nbestSVMCols=[]\n\nbestRFCScore = 0.0\nbestRFCCols=[]\n\nfor qual in all_qual_cols: \n  qual_cols = [col for col in X_train.columns if qual in col ]\n  \n  for pair in combinations(all_quant_cols, 2):\n    cols = qual_cols + list(pair) \n\n    #LogisticRegression\n    LR = LogisticRegression(max_iter=10000000000000000000)\n        \n    LRScore = cross_val_score(LR, X_train[cols], y_train, cv=5).mean()\n    \n    # keep track of best Logistic Regression Score\n    if LRScore &gt;= bestLRScore :\n      bestLRScore = LRScore\n      bestLRCols = cols\n        \n    #DecisionTreeClassifier\n    param_grid = { 'max_depth': [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, None ]}\n    \n    tree = DecisionTreeClassifier()\n    grid_search = GridSearchCV(tree, param_grid, cv=5)\n    grid_search.fit(X_train[cols], y_train)\n    DTCScore  = grid_search.best_score_\n        \n    if(DTCScore &gt; bestDTCScore):\n      bestDTCScore = DTCScore\n      bestDTCCols = cols\n      bestDTCDepth = grid_search.best_params_\n      \n    \n    # Random Forrest Classifier    \n    forrest = RandomForestClassifier(random_state=0)\n    grid_search = GridSearchCV(forrest, param_grid, cv=5)\n    grid_search.fit(X_train[cols], y_train)\n    \n    RFCScore  = grid_search.best_score_\n    \n    # keep track of best RFC Score  \n    if(RFCScore &gt; bestRFCScore):\n      bestRFCScore = RFCScore\n      bestRFCCols = cols\n      bestRFCDepth = grid_search.best_params_\n    \n    #SVC\n    SVM = SVC()\n\n    # use grid search to find best gamma for SVM\n    g = {'gamma': 10.0 ** np.arange(-5, 5) }\n\n    grid_search = GridSearchCV(SVM, g, cv=5)\n    grid_search.fit(X_train[cols], y_train)\n    \n    SVMScore  = grid_search.best_score_   \n    \n    # keep track of best SVM Score\n    if(SVMScore &gt; bestSVMScore):\n      bestSVMScore = SVMScore\n      bestSVMCols = cols\n        \n\n  \nprint(\"best LR\",bestLRCols, \":\", bestLRScore)\nprint(\"best DTC\",bestDTCCols, \":\", bestDTCScore)\nprint(\"best max depth:\", bestDTCDepth)\nprint(\"best RFC\", bestRFCCols, \":\", bestRFCScore)\nprint(\"best max depth:\", bestRFCDepth)\nprint(\"best SVM\", bestSVMCols, \":\", bestSVMScore)\n\nbest LR ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] : 0.9883107088989442\nbest DTC ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] : 0.9765460030165913\nbest max depth: {'max_depth': 7}\nbest RFC ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Flipper Length (mm)'] : 0.9844645550527904\nbest max depth: {'max_depth': 5}\nbest SVM ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] : 0.9805429864253394\n\n\nFrom my iterative search through the features and the different models I was able to find that the best score was Logistic Regression with Culmen Length (mm), Culmen Depth (mm), and Sex. This model with these features had a 0.9883107088989442% classification rate. This made sense as I noted in my data exploration that sex was an important distinction to make when comparing different features to classify teh species.\n\n\n\nNext I prepared the test data by shorting my Species column and identifying selected columns of the best fitting models- Culmen Length (mm), Culmen Depth (mm), and Sex for Logistic Regression. On my test data I achieved 100% testing accuracy.\n\ntest_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/test.csv\"\ntest = pd.read_csv(test_url)\n\ntest[\"Species\"] = test[\"Species\"].str.split().str.get(0)\n\nX_test, y_test = prepare_data(test)\n\nselected_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)','Sex_FEMALE', 'Sex_MALE']\n\nX_train_selected = X_train[selected_cols]\nX_test_selected = X_test[selected_cols]\n\nLR = LogisticRegression()\nLR.fit(X_train_selected, y_train)\ntestScore = LR.score(X_test_selected, y_test)\n\nprint(testScore)\n\n1.0\n\n\n/Users/lindseyschweitzer/anaconda3/envs/ml-0451/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:460: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\n\n\n\nI visualized how my model worked on the training and test data by plotting the data and displaying the decision regions of my model.\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import Patch\n\ndef plot_regions(model, X, y):\n    \n    x0 = X[X.columns[0]]\n    x1 = X[X.columns[1]]\n    qual_features = X.columns[2:]\n    \n    fig, axarr = plt.subplots(1, len(qual_features), figsize = (7, 3))\n\n    # create a grid\n    grid_x = np.linspace(x0.min(),x0.max(),501)\n    grid_y = np.linspace(x1.min(),x1.max(),501)\n    xx, yy = np.meshgrid(grid_x, grid_y)\n    \n    XX = xx.ravel()\n    YY = yy.ravel()\n\n    for i in range(len(qual_features)):\n      XY = pd.DataFrame({\n        X.columns[0] : XX,\n        X.columns[1] : YY\n      })\n\n      for j in qual_features:\n        XY[j] = 0\n\n      XY[qual_features[i]] = 1\n\n      p = model.predict(XY)\n      p = p.reshape(xx.shape)\n      \n      \n      # use contour plot to visualize the predictions\n      axarr[i].contourf(xx, yy, p, cmap = \"jet\", alpha = 0.2, vmin = 0, vmax = 2)\n      \n      ix = X[qual_features[i]] == 1\n      # plot the data\n      axarr[i].scatter(x0[ix], x1[ix], c = y[ix], cmap = \"jet\", vmin = 0, vmax = 2)\n      \n      axarr[i].set(xlabel = X.columns[0], \n            ylabel  = X.columns[1], \n            title = qual_features[i])\n      \n      patches = []\n      for color, spec in zip([\"red\", \"green\", \"blue\"], [\"Adelie\", \"Chinstrap\", \"Gentoo\"]):\n        patches.append(Patch(color = color, label = spec))\n\n      plt.legend(title = \"Species\", handles = patches, loc = \"best\")\n      \n      plt.tight_layout()\n\nplot_regions(LR, X_train_selected, y_train)\n\n\n\n\n\n\n\n\n\nplot_regions(LR, X_test_selected, y_test)\n\n\n\n\n\n\n\n\n\n\n\nFinally, to visualize the successful identification of my model with my three chosen characteristics I used a confusion matrix on the testing data.\n\nfrom sklearn.metrics import confusion_matrix\n\ny_test_pred = LR.predict(X_test_selected)\nC = confusion_matrix(y_test, y_test_pred)\n\nfor i in range(3):\n    for j in range(3):\n        print(f\"There were {C[i,j]} {le.classes_[i]} penguin(s) who were classified as {le.classes_[j]}.\")\n\nThere were 31 Adelie penguin(s) who were classified as Adelie.\nThere were 0 Adelie penguin(s) who were classified as Chinstrap.\nThere were 0 Adelie penguin(s) who were classified as Gentoo.\nThere were 0 Chinstrap penguin(s) who were classified as Adelie.\nThere were 11 Chinstrap penguin(s) who were classified as Chinstrap.\nThere were 0 Chinstrap penguin(s) who were classified as Gentoo.\nThere were 0 Gentoo penguin(s) who were classified as Adelie.\nThere were 0 Gentoo penguin(s) who were classified as Chinstrap.\nThere were 26 Gentoo penguin(s) who were classified as Gentoo.\n\n\n\nfrom sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, y_test_pred, normalize = \"true\")\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\nThis is a perfect confusion matrix as the model has 100% testing accuracy in classifying the penguins. This result is exactly what we want.\n\n\n\nThis blog post taught me many things. Firstly, it allowed me to gain practice exploring and understanding data. I was able to explore the Palmer Penguin data set by creating tables and graphs. Then I was able to use the knowledge gained by the exploration to train my own classifier. I was able to become familiar with various different machine learning models through this assignment: Logistic Regression, Decision Tree Classifier, Random Forest Classifier, and Support Vector Machines. Through this process, I learned about grid search and how to find optimal parameters. I then got practice training a Logistic Regression with Culmen Length (mm), Culmen Depth (mm), and Sex and finally testing it on our test data to get a 100% accuracy rate. Not only did I become more familiar with this particular data set, but I was able to learn skills in how to analyze data and build and test Machine Learning Models."
  },
  {
    "objectID": "posts/post1/homework1.html#introduction",
    "href": "posts/post1/homework1.html#introduction",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "The Palmer Penguins data set was collected by Dr. Kristen Gorman and the Palmer Station, Anartica LTER, a member of the Long Term Ecological Research Network. It contains physiological measurements from three species of penguins and is widely used in data analysis. My goal with homework 1 is to identify three characteristics (two quantitative and one qualitative) and a model, which I then train, to identify penguin species with 100% testing accuracy.\n\nimport pandas as pd\n\ntrain_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/train.csv\"\ntrain = pd.read_csv(train_url)\n\n\ntrain.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0809\n31\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN63A1\nYes\n11/24/08\n40.9\n16.6\n187.0\n3200.0\nFEMALE\n9.08458\n-24.54903\nNaN\n\n\n1\nPAL0809\n41\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN74A1\nYes\n11/24/08\n49.0\n19.5\n210.0\n3950.0\nMALE\n9.53262\n-24.66867\nNaN\n\n\n2\nPAL0708\n4\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN32A2\nYes\n11/27/07\n50.0\n15.2\n218.0\n5700.0\nMALE\n8.25540\n-25.40075\nNaN\n\n\n3\nPAL0708\n15\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN38A1\nYes\n12/3/07\n45.8\n14.6\n210.0\n4200.0\nFEMALE\n7.79958\n-25.62618\nNaN\n\n\n4\nPAL0809\n34\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN65A2\nYes\n11/24/08\n51.0\n18.8\n203.0\n4100.0\nMALE\n9.23196\n-24.17282\nNaN"
  },
  {
    "objectID": "posts/post1/homework1.html#explore",
    "href": "posts/post1/homework1.html#explore",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "To start my exploration into the penguin data, I first sough to understand the data by plotting it\n\nimport seaborn as sns\n\n# body mass vs specie with colors for gender\n\n# replace the column with the first word in each entry\ntrain[\"Species\"] = train[\"Species\"].str.split().str.get(0)\n\nsns.catplot(data=train, x=\"Species\", y=\"Body Mass (g)\", hue=\"Sex\")\n\n/Users/lindseyschweitzer/anaconda3/envs/ml-0451/lib/python3.9/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/lindseyschweitzer/anaconda3/envs/ml-0451/lib/python3.9/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThis plot shows penguins as points colored by sex, with species as the x-axis and body mass (in grams) on the y-axis. This plot displays that on average, male penguins are larger than female penguins. It also shows a trend of Gentoo species of penguins larger than Chinstrap or Adelie penguins- who are relatively similar in size. This indicates that Body Mass (g) could potentially be a useful indicator in indicating species type. It is also important to note that the separation of gender allows us to make these assertions. Gento male penguins are generally larger than Adelie male penguins and the same follows with female penguins of these same two species. However, Gentoo female penguins are roughly the same size as Adelie male penguins. Therefore gender might be a useful tool in predicting penguin species.\n\nsns.catplot(data=train, kind=\"violin\", x=\"Delta 13 C (o/oo)\", y=\"Island\", hue=\"Species\")\n\n\n\n\n\n\n\n\nThis plot shows the penguins of different species with different colors graphed on Delta 13 C (o/oo) and Island location. Delta 13(o/oo) is an interesting indicator as it is widely used as an indicator of diet especially in reference to vegetation. This therefore shows that there could be a large difference in diet between Chinstrap and the other two species of penguins. Adelie penguins are present in all three islands whereas Gentoo and Chinstrap penguins are isolated to one of the three. Therefore Island could be a helpful indicator of species type, but probably would not be indicative by itself.\n\ntable = train.groupby(['Species', 'Sex']).aggregate({'Culmen Length (mm)' : ['min', 'max','mean']})\nprint(table)\n\n                 Culmen Length (mm)                 \n                                min   max       mean\nSpecies   Sex                                       \nAdelie    FEMALE               34.0  42.2  37.426415\n          MALE                 34.6  46.0  40.404918\nChinstrap FEMALE               40.9  58.0  46.722581\n          MALE                 49.0  55.8  51.334615\nGentoo    .                    44.5  44.5  44.500000\n          FEMALE               40.9  50.5  45.455102\n          MALE                 44.4  55.9  49.006818\n\n\nThis table indicates that on average male penguins have longer Culmen Length than their female counterparts. Male Gentoo penguins have longer Culmens then male Chinstraps who have longer Culmens than male Adelie penguins while the order for female penguins descends for Chinstrap, Gentoo, then Adelie. These distinctions could serve useful in training our model to differentiate species. It also serves to note that the gender distinction matters when comparing species."
  },
  {
    "objectID": "posts/post1/homework1.html#model",
    "href": "posts/post1/homework1.html#model",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "I then attempted to find three features of the data (one qualitative and two quantitative) and train a model on these features that achieves 100% testing accuracy.\nFirst I did data preparation to prepare the quantitative columns of the data\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train[\"Species\"])\n\ndef prepare_data(df):\n  df = df.drop([\"studyName\", \"Sample Number\", \"Individual ID\", \"Date Egg\", \"Comments\", \"Region\"], axis = 1)\n  df = df[df[\"Sex\"] != \".\"]\n  df = df.dropna()\n  y = le.transform(df[\"Species\"])\n  df = df.drop([\"Species\"], axis = 1)\n  df = pd.get_dummies(df)\n  return df, y\n\nX_train, y_train = prepare_data(train)\n\n\nX_train.head()\n\n\n\n\n\n\n\n\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nIsland_Biscoe\nIsland_Dream\nIsland_Torgersen\nStage_Adult, 1 Egg Stage\nClutch Completion_No\nClutch Completion_Yes\nSex_FEMALE\nSex_MALE\n\n\n\n\n0\n40.9\n16.6\n187.0\n3200.0\n9.08458\n-24.54903\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n1\n49.0\n19.5\n210.0\n3950.0\n9.53262\n-24.66867\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n2\n50.0\n15.2\n218.0\n5700.0\n8.25540\n-25.40075\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n3\n45.8\n14.6\n210.0\n4200.0\n7.79958\n-25.62618\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n4\n51.0\n18.8\n203.0\n4100.0\n9.23196\n-24.17282\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n\n\n\n\n\nI completed an exhaustive iterative search to find the best markers. I used cross validation one each combination of one qualitative and two quantitative column with different models keeping track of the best score for each model. In terms of models I used a Logistic Regression, Decision Tree Classifier, SVC, and Random Forrest Classifier. For the Decision Tree Classifier and the Random Forrest Classifier I used grid search across the amount of parameters to identify the optimal maximum depth. For SVC I used grid search to find the optimal value for gamma across a wide array of numbers. With the best markers of each model, I also saved the columns of the best score.\n\nfrom itertools import combinations\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\n\nall_qual_cols = [\"Clutch Completion\", \"Sex\", \"Island\",'Stage_Adult, 1 Egg Stage']\nall_quant_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)','Body Mass (g)','Delta 15 N (o/oo)','Delta 13 C (o/oo)',]\n\nbestLRScore = 0.0\nbestLRCols=[]\ncol_combos = []\n\n\nbestDTCScore = 0.0\nbestDTCCols=[]\n\nbestSVMScore = 0.0\nbestSVMCols=[]\n\nbestRFCScore = 0.0\nbestRFCCols=[]\n\nfor qual in all_qual_cols: \n  qual_cols = [col for col in X_train.columns if qual in col ]\n  \n  for pair in combinations(all_quant_cols, 2):\n    cols = qual_cols + list(pair) \n\n    #LogisticRegression\n    LR = LogisticRegression(max_iter=10000000000000000000)\n        \n    LRScore = cross_val_score(LR, X_train[cols], y_train, cv=5).mean()\n    \n    # keep track of best Logistic Regression Score\n    if LRScore &gt;= bestLRScore :\n      bestLRScore = LRScore\n      bestLRCols = cols\n        \n    #DecisionTreeClassifier\n    param_grid = { 'max_depth': [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, None ]}\n    \n    tree = DecisionTreeClassifier()\n    grid_search = GridSearchCV(tree, param_grid, cv=5)\n    grid_search.fit(X_train[cols], y_train)\n    DTCScore  = grid_search.best_score_\n        \n    if(DTCScore &gt; bestDTCScore):\n      bestDTCScore = DTCScore\n      bestDTCCols = cols\n      bestDTCDepth = grid_search.best_params_\n      \n    \n    # Random Forrest Classifier    \n    forrest = RandomForestClassifier(random_state=0)\n    grid_search = GridSearchCV(forrest, param_grid, cv=5)\n    grid_search.fit(X_train[cols], y_train)\n    \n    RFCScore  = grid_search.best_score_\n    \n    # keep track of best RFC Score  \n    if(RFCScore &gt; bestRFCScore):\n      bestRFCScore = RFCScore\n      bestRFCCols = cols\n      bestRFCDepth = grid_search.best_params_\n    \n    #SVC\n    SVM = SVC()\n\n    # use grid search to find best gamma for SVM\n    g = {'gamma': 10.0 ** np.arange(-5, 5) }\n\n    grid_search = GridSearchCV(SVM, g, cv=5)\n    grid_search.fit(X_train[cols], y_train)\n    \n    SVMScore  = grid_search.best_score_   \n    \n    # keep track of best SVM Score\n    if(SVMScore &gt; bestSVMScore):\n      bestSVMScore = SVMScore\n      bestSVMCols = cols\n        \n\n  \nprint(\"best LR\",bestLRCols, \":\", bestLRScore)\nprint(\"best DTC\",bestDTCCols, \":\", bestDTCScore)\nprint(\"best max depth:\", bestDTCDepth)\nprint(\"best RFC\", bestRFCCols, \":\", bestRFCScore)\nprint(\"best max depth:\", bestRFCDepth)\nprint(\"best SVM\", bestSVMCols, \":\", bestSVMScore)\n\nbest LR ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] : 0.9883107088989442\nbest DTC ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] : 0.9765460030165913\nbest max depth: {'max_depth': 7}\nbest RFC ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Flipper Length (mm)'] : 0.9844645550527904\nbest max depth: {'max_depth': 5}\nbest SVM ['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] : 0.9805429864253394\n\n\nFrom my iterative search through the features and the different models I was able to find that the best score was Logistic Regression with Culmen Length (mm), Culmen Depth (mm), and Sex. This model with these features had a 0.9883107088989442% classification rate. This made sense as I noted in my data exploration that sex was an important distinction to make when comparing different features to classify teh species."
  },
  {
    "objectID": "posts/post1/homework1.html#test-the-models-on-the-test-data",
    "href": "posts/post1/homework1.html#test-the-models-on-the-test-data",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "Next I prepared the test data by shorting my Species column and identifying selected columns of the best fitting models- Culmen Length (mm), Culmen Depth (mm), and Sex for Logistic Regression. On my test data I achieved 100% testing accuracy.\n\ntest_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/test.csv\"\ntest = pd.read_csv(test_url)\n\ntest[\"Species\"] = test[\"Species\"].str.split().str.get(0)\n\nX_test, y_test = prepare_data(test)\n\nselected_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)','Sex_FEMALE', 'Sex_MALE']\n\nX_train_selected = X_train[selected_cols]\nX_test_selected = X_test[selected_cols]\n\nLR = LogisticRegression()\nLR.fit(X_train_selected, y_train)\ntestScore = LR.score(X_test_selected, y_test)\n\nprint(testScore)\n\n1.0\n\n\n/Users/lindseyschweitzer/anaconda3/envs/ml-0451/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:460: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result("
  },
  {
    "objectID": "posts/post1/homework1.html#plotting-decision-regions",
    "href": "posts/post1/homework1.html#plotting-decision-regions",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "I visualized how my model worked on the training and test data by plotting the data and displaying the decision regions of my model.\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nfrom matplotlib.patches import Patch\n\ndef plot_regions(model, X, y):\n    \n    x0 = X[X.columns[0]]\n    x1 = X[X.columns[1]]\n    qual_features = X.columns[2:]\n    \n    fig, axarr = plt.subplots(1, len(qual_features), figsize = (7, 3))\n\n    # create a grid\n    grid_x = np.linspace(x0.min(),x0.max(),501)\n    grid_y = np.linspace(x1.min(),x1.max(),501)\n    xx, yy = np.meshgrid(grid_x, grid_y)\n    \n    XX = xx.ravel()\n    YY = yy.ravel()\n\n    for i in range(len(qual_features)):\n      XY = pd.DataFrame({\n        X.columns[0] : XX,\n        X.columns[1] : YY\n      })\n\n      for j in qual_features:\n        XY[j] = 0\n\n      XY[qual_features[i]] = 1\n\n      p = model.predict(XY)\n      p = p.reshape(xx.shape)\n      \n      \n      # use contour plot to visualize the predictions\n      axarr[i].contourf(xx, yy, p, cmap = \"jet\", alpha = 0.2, vmin = 0, vmax = 2)\n      \n      ix = X[qual_features[i]] == 1\n      # plot the data\n      axarr[i].scatter(x0[ix], x1[ix], c = y[ix], cmap = \"jet\", vmin = 0, vmax = 2)\n      \n      axarr[i].set(xlabel = X.columns[0], \n            ylabel  = X.columns[1], \n            title = qual_features[i])\n      \n      patches = []\n      for color, spec in zip([\"red\", \"green\", \"blue\"], [\"Adelie\", \"Chinstrap\", \"Gentoo\"]):\n        patches.append(Patch(color = color, label = spec))\n\n      plt.legend(title = \"Species\", handles = patches, loc = \"best\")\n      \n      plt.tight_layout()\n\nplot_regions(LR, X_train_selected, y_train)\n\n\n\n\n\n\n\n\n\nplot_regions(LR, X_test_selected, y_test)"
  },
  {
    "objectID": "posts/post1/homework1.html#confusion-matrix",
    "href": "posts/post1/homework1.html#confusion-matrix",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "Finally, to visualize the successful identification of my model with my three chosen characteristics I used a confusion matrix on the testing data.\n\nfrom sklearn.metrics import confusion_matrix\n\ny_test_pred = LR.predict(X_test_selected)\nC = confusion_matrix(y_test, y_test_pred)\n\nfor i in range(3):\n    for j in range(3):\n        print(f\"There were {C[i,j]} {le.classes_[i]} penguin(s) who were classified as {le.classes_[j]}.\")\n\nThere were 31 Adelie penguin(s) who were classified as Adelie.\nThere were 0 Adelie penguin(s) who were classified as Chinstrap.\nThere were 0 Adelie penguin(s) who were classified as Gentoo.\nThere were 0 Chinstrap penguin(s) who were classified as Adelie.\nThere were 11 Chinstrap penguin(s) who were classified as Chinstrap.\nThere were 0 Chinstrap penguin(s) who were classified as Gentoo.\nThere were 0 Gentoo penguin(s) who were classified as Adelie.\nThere were 0 Gentoo penguin(s) who were classified as Chinstrap.\nThere were 26 Gentoo penguin(s) who were classified as Gentoo.\n\n\n\nfrom sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, y_test_pred, normalize = \"true\")\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\nThis is a perfect confusion matrix as the model has 100% testing accuracy in classifying the penguins. This result is exactly what we want."
  },
  {
    "objectID": "posts/post1/homework1.html#discussion",
    "href": "posts/post1/homework1.html#discussion",
    "title": " Palmer Penguins ",
    "section": "",
    "text": "This blog post taught me many things. Firstly, it allowed me to gain practice exploring and understanding data. I was able to explore the Palmer Penguin data set by creating tables and graphs. Then I was able to use the knowledge gained by the exploration to train my own classifier. I was able to become familiar with various different machine learning models through this assignment: Logistic Regression, Decision Tree Classifier, Random Forest Classifier, and Support Vector Machines. Through this process, I learned about grid search and how to find optimal parameters. I then got practice training a Logistic Regression with Culmen Length (mm), Culmen Depth (mm), and Sex and finally testing it on our test data to get a 100% accuracy rate. Not only did I become more familiar with this particular data set, but I was able to learn skills in how to analyze data and build and test Machine Learning Models."
  },
  {
    "objectID": "posts/post5/homework5.html",
    "href": "posts/post5/homework5.html",
    "title": " Implementing Logistic Regression ",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\nfrom logistic import LogisticRegression, GradientDescentOptimizer\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n\nLink to source code (logistic.py)\nFor this blog post I implemented logistic regression and performed several experiments on my model. The first experiment I conducted was to see vanilla gradient descent. Vanilla gradient descent is when beta=0 and we were able to know that the model works because we saw loss decrease monotonically. The second experiment was to understand the benefits of momentum. By increasing the beta value we were able to see loss decrease faster than the vanilla gradient descent case. Then, finally, we conducted an experiment to see the potential harms of overfitting our data. By reaching 100% accuracy on training data, we could see the drawback directly by a lower accuracy rate on training data. Overall, I was able to learn more about implementing machine learning models and how to test their functionality. I was able to concretely understand the benefits of momentum and the drawbacks of overfitting.\n\n\n\nBefore doing any experiments, I had to generate data for a classification problem.\n\nimport torch\n\ndef classification_data(n_points = 300, noise = 0.2, p_dims = 2):\n    \n    y = torch.arange(n_points) &gt;= int(n_points/2)\n    y = 1.0*y\n    X = y[:, None] + torch.normal(0.0, noise, size = (n_points,p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n    \n    return X, y\n\nPlot the data\n\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\n\ndef plot_classification_data(X, y, ax):\n    targets = [0, 1]\n    markers = [\"o\" , \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix,0], X[ix,1], s = 20,  c = y[ix], facecolors = \"none\", edgecolors = \"darkgrey\", cmap = \"BrBG\", vmin = -2, vmax = 2, alpha = 0.5, marker = markers[i])\n    ax.set(xlabel = r\"$x_1$\", ylabel = r\"$x_2$\")\n    \n    \nfig, ax = plt.subplots(1, 1)\n\n# p_dims is 2\nX, y = classification_data(noise = 0.2)\nplot_classification_data(X, y, ax)\n\n\n\n\n\n\n\n\nCode to graph a straight line\n\ndef draw_line(w, x_min, x_max, ax, **kwargs):\n    w_ = w.flatten()\n    x = torch.linspace(x_min, x_max, 101)\n    y = -(w_[0]*x + w_[2])/w_[1]\n    l = ax.plot(x, y, **kwargs)\n\n\n\nThe first experiment that I performed was vanilla gradient descent: When p_dim = 2, when alpha is sufficiently small and beta=0.\nWant to see:\n\nGradient descent for logistic regression converges to a weight vector w that looks visually correct\n\nshow this by plot the decision boundary with the data\n\nLoss decreases monotonically: A monotonic function is a function which is either entirely nonincreasing or nondecreasing.\n\nshow this by plotting the loss over iterations\n\n\nFirst implement a training loop with graphs with a dividing line to visualize our progress.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = GradientDescentOptimizer(LR)\n\n# initialize for main loop\nloss_vec_van = []\n\nfor index in range(5000):\n    \n    # for vanilla gradient descent, alpha must be sufficiently small and beta must be 0\n    opt.step(X, y, alpha = 0.01, beta = 0)\n    loss = LR.loss(X, y).item()\n    loss_vec_van.append(loss)\n\n\ndef find_accuracy(X, y):\n\n    predictions = LR.predict(X)\n    correct_preds = (predictions == y).float()\n    accuracy = torch.mean(correct_preds)\n\n    print(f\"Accuracy: {accuracy.item()}\")\n\nfind_accuracy(X, y)\n\nAccuracy: 0.996666669845581\n\n\nPlot the loss over time over the 5000 iterations.\n\nimport numpy as np\n\ndef plot_loss(loss, label= \"\"):\n    plt.style.use('seaborn-v0_8-whitegrid')\n    plt.figure(figsize=(10, 6))\n\n    \n    plt.plot(loss, color = \"blue\", label=label)\n    plt.scatter(torch.arange(len(loss)), loss, color = \"slategrey\", s=5)\n    plt.gca().set(xlabel = \"Perceptron Iteration (Updates Only)\", ylabel = \"loss\")\n    \n    plt.title(f\"Final loss: {loss[len(loss)-1]:.3f}\")\n\nplot_loss(loss_vec_van)\n\n\n\n\n\n\n\n\nWe can see that the loss is decreasing monotonically over time through this graph of the loss. The negative slope shows us that the loss is in fact decreasing over time. In other words, our machine learning model is learning!\nPlot the final line separating the data\n\nfig, ax = plt.subplots(1, 1)\n\nplot_classification_data(X, y, ax)\n\ndraw_line(LR.w, x_min=-1, x_max=2, ax=ax, color=\"black\")\nax.set_title(f\"loss = {loss:.3f}\")\nax.set(xlim=(-1, 2), ylim=(-1, 2))\n\n\n\n\n\n\n\n\nWe can see that the dividing line almost perfectly divides the classes. In time, we could see the logistic regression training could become perfectly accurate.\n\n\n\n\nOur next experiment was to see the benefits of momentum. On the same data, gradient descent with momentum (e.g. beta=0.9) can converge to the correct weight vector in fewer iterations than vanilla gradient descent (with beta=0).\nWe want to see:\n\nA model that learns at a faster rate\n\nshow loss decreasing at a faster rate than when beta was 0\n\n\nFirst implement a training loop with graphs with a dividing line to visualize our progress.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = GradientDescentOptimizer(LR)\nX, y = classification_data(noise = 0.2)\n\n# initialize for main loop\nloss_vec_mom = []\n\nfor index in range(5000):\n    \n    # to see the benefits of momentum, alpha must be sufficiently small and beta must be 0.9\n    opt.step(X, y, alpha = 0.01, beta = 0.9)\n    loss = LR.loss(X, y).item()            \n    loss_vec_mom.append(loss)\n\nPlot the loss over time over the 5000 iterations.\n\nplt.plot(loss_vec_van, color = \"green\", label='Vanilla')\nplt.plot(loss_vec_mom, color = \"blue\", label='Momentum')\n\nplt.gca().set(xlabel = \"Perceptron Iteration (Updates Only)\", ylabel = \"loss\")\nplt.legend()\n\n\n\n\n\n\n\n\nThe faster declining slope of the loss shows that the larger beta value does in fact increase the learning speed of the machine learning model.\n\nfig, ax = plt.subplots(1, 1)\n\nplot_classification_data(X, y, ax)\n\ndraw_line(LR.w, x_min=-1, x_max=2, ax=ax, color=\"black\")\nax.set_title(f\"loss = {loss:.3f}\")\nax.set(xlim=(-1, 2), ylim=(-1, 2))\n\n\n\n\n\n\n\n\nWe can see the benefits of increase of momentum by viewing the improved dividing line. The increase in the beta value allows our logistic regression to improve at a much faster rate then when beta=0. We know that because with the same number of iterations, the loss decreased more, or in other words, the model learned to classify at a faster rate.\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nA perfect accuracy rate!\n\n\n\nOur final experiment was to show the danger of overfitting. To show this I need to generate some data where p_dim &gt; n_points and create an instance where the same logistic regression model has a 100% accuracy rate on training data.\nWant to see:\n\nPerfect accuracy for training data\nLess accurate classification for testing data with the exact same parameters\n\nFor overfitting, we need to generate data where p_dim &gt; n_points.\n\nX_train, y_train = classification_data(n_points = 50, noise = 0.5, p_dims = 100)\n\nGoal to achieve 100% accuracy with the training data.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = GradientDescentOptimizer(LR)\n\n# initialize for main loop\nloss_vec = []\n\nfor index in range(2000):\n   \n    opt.step(X_train, y_train, alpha = 0.01, beta = 0.9)\n    loss = LR.loss(X_train, y_train).item()\n    loss_vec.append(loss)\n\n\nprint(loss_vec)\n\n[0.633738100528717, 0.5438883304595947, 0.4618161916732788, 0.40402740240097046, 0.36823952198028564, 0.3463859558105469, 0.33207085728645325, 0.32158127427101135, 0.3129945993423462, 0.30535393953323364, 0.2981888949871063, 0.29127079248428345, 0.2844916582107544, 0.27780479192733765, 0.2711944878101349, 0.2646607458591461, 0.25821107625961304, 0.25185608863830566, 0.24560725688934326, 0.23947563767433167, 0.23347118496894836, 0.22760243713855743, 0.22187648713588715, 0.21629880368709564, 0.21087360382080078, 0.20560361444950104, 0.20049048960208893, 0.19553472101688385, 0.19073593616485596, 0.18609294295310974, 0.1816038191318512, 0.17726610600948334, 0.17307688295841217, 0.16903269290924072, 0.16512995958328247, 0.16136476397514343, 0.1577329784631729, 0.15423043072223663, 0.15085284411907196, 0.1475958526134491, 0.14445513486862183, 0.14142641425132751, 0.13850541412830353, 0.1356879472732544, 0.1329699158668518, 0.13034740090370178, 0.12781642377376556, 0.1253732591867447, 0.12301427125930786, 0.12073586136102676, 0.11853475868701935, 0.11640762537717819, 0.1143513098359108, 0.11236286163330078, 0.11043937504291534, 0.10857807099819183, 0.10677634924650192, 0.10503166168928146, 0.10334160178899765, 0.10170385986566544, 0.10011627525091171, 0.09857672452926636, 0.09708324074745178, 0.09563390910625458, 0.0942269116640091, 0.09286051988601685, 0.0915331095457077, 0.09024310111999512, 0.08898898959159851, 0.08776937425136566, 0.08658287674188614, 0.08542823046445847, 0.08430419862270355, 0.08320960402488708, 0.08214332908391953, 0.08110430091619492, 0.08009150624275208, 0.0791039913892746, 0.07814081013202667, 0.07720109820365906, 0.0762840062379837, 0.07538872957229614, 0.07451450824737549, 0.07366058975458145, 0.07282629609107971, 0.07201094925403595, 0.07121390104293823, 0.0704345628619194, 0.06967232376337051, 0.06892664730548859, 0.06819696724414825, 0.06748278439044952, 0.0667836144566536, 0.06609895825386047, 0.06542839109897614, 0.06477145105600357, 0.06412775814533234, 0.06349688023328781, 0.06287844479084015, 0.0622720830142498, 0.06167743727564812, 0.06109416484832764, 0.06052194535732269, 0.05996045097708702, 0.059409402310848236, 0.05886848270893097, 0.05833742767572403, 0.05781596153974533, 0.05730381980538368, 0.056800756603479385, 0.05630652979016304, 0.05582091212272644, 0.05534365773200989, 0.05487455800175667, 0.05441341921687126, 0.05396000295877457, 0.05351414158940315, 0.053075648844242096, 0.052644334733486176, 0.05222000926733017, 0.05180253088474274, 0.05139169096946716, 0.050987374037504196, 0.05058939382433891, 0.05019763112068176, 0.04981191083788872, 0.04943211376667023, 0.04905809089541435, 0.04868970066308975, 0.04832683503627777, 0.04796937480568886, 0.04761717468500137, 0.04727013036608696, 0.046928148716688156, 0.046591076999902725, 0.046258844435214996, 0.04593133553862572, 0.045608438551425934, 0.045290082693099976, 0.044976137578487396, 0.04466654732823372, 0.04436120018362999, 0.04406002163887024, 0.04376290738582611, 0.043469786643981934, 0.043180570006370544, 0.042895182967185974, 0.042613573372364044, 0.0423356257379055, 0.04206128418445587, 0.04179048910737038, 0.04152318462729454, 0.041259266436100006, 0.040998686105012894, 0.04074139520525932, 0.04048732668161392, 0.040236398577690125, 0.039988573640584946, 0.03974378481507301, 0.039501968771219254, 0.03926309943199158, 0.03902710601687431, 0.03879392519593239, 0.03856353089213371, 0.038335852324962616, 0.038110848516225815, 0.03788847476243973, 0.03766869008541107, 0.03745144233107567, 0.03723669424653053, 0.03702438995242119, 0.03681449592113495, 0.03660697489976883, 0.03640177845954895, 0.036198876798152924, 0.035998232662677765, 0.03579980134963989, 0.03560354933142662, 0.035409435629844666, 0.035217419266700745, 0.03502750024199486, 0.03483960032463074, 0.034653712064027786, 0.03446980565786362, 0.034287840127944946, 0.03410777449607849, 0.033929597586393356, 0.033753279596567154, 0.0335787832736969, 0.03340607509016991, 0.03323514759540558, 0.03306595981121063, 0.03289847820997238, 0.03273269534111023, 0.03256857767701149, 0.032406099140644073, 0.0322452187538147, 0.03208594769239426, 0.03192823752760887, 0.031772054731845856, 0.031617421656847, 0.031464263796806335, 0.03131258487701416, 0.031162375584244728, 0.03101358562707901, 0.030866215005517006, 0.03072025254368782, 0.03057565540075302, 0.030432408675551414, 0.030290512368083, 0.030149927362799644, 0.030010638758540154, 0.029872631654143333, 0.029735885560512543, 0.029600396752357483, 0.029466135427355766, 0.029333079233765602, 0.02920122817158699, 0.02907055802643299, 0.02894105762243271, 0.028812691569328308, 0.028685469180345535, 0.02855936996638775, 0.028434377163648605, 0.028310470283031464, 0.028187651187181473, 0.0280658770352602, 0.027945155277848244, 0.027825474739074707, 0.0277068130671978, 0.027589164674282074, 0.02747250720858574, 0.0273568257689476, 0.027242114767432213, 0.027128372341394424, 0.02701556868851185, 0.026903703808784485, 0.026792753487825394, 0.026682719588279724, 0.02657359652221203, 0.026465341448783875, 0.02635798044502735, 0.02625148370862007, 0.02614584192633629, 0.02604104019701481, 0.02593708597123623, 0.02583394944667816, 0.0257316492497921, 0.025630144402384758, 0.025529442355036736, 0.02542952261865139, 0.02533038891851902, 0.025232018902897835, 0.025134418159723282, 0.02503756247460842, 0.024941453710198402, 0.02484607696533203, 0.024751434102654457, 0.024657506495714188, 0.024564284831285477, 0.02447177842259407, 0.02437996119260788, 0.024288825690746307, 0.024198371917009354, 0.02410859800875187, 0.024019470438361168, 0.02393101155757904, 0.023843200877308846, 0.023756034672260284, 0.02366950735449791, 0.02358359843492508, 0.02349831536412239, 0.02341364696621895, 0.023329583927989006, 0.023246141150593758, 0.023163264617323875, 0.023080989718437195, 0.022999301552772522, 0.022918183356523514, 0.022837644442915916, 0.022757668048143387, 0.022678246721625328, 0.02259938232600689, 0.022521063685417175, 0.022443287074565887, 0.022366054356098175, 0.0222893375903368, 0.022213155403733253, 0.02213749848306179, 0.02206234261393547, 0.02198770083487034, 0.021913563832640648, 0.02183992601931095, 0.0217667818069458, 0.021694118157029152, 0.02162194810807705, 0.0215502567589283, 0.021479027345776558, 0.021408285945653915, 0.021338002756237984, 0.021268177777528763, 0.02119881473481655, 0.021129891276359558, 0.02106141857802868, 0.020993396639823914, 0.02092580311000347, 0.020858652889728546, 0.020791923627257347, 0.02072562277317047, 0.020659752190113068, 0.020594289526343346, 0.02052924782037735, 0.020464608445763588, 0.020400382578372955, 0.02033654972910881, 0.020273126661777496, 0.020210087299346924, 0.020147452130913734, 0.02008519321680069, 0.020023318007588387, 0.019961828365921974, 0.019900711253285408, 0.019839977845549583, 0.019779611378908157, 0.019719600677490234, 0.01965995691716671, 0.019600683823227882, 0.01954176276922226, 0.01948319748044014, 0.01942497305572033, 0.019367104396224022, 0.019309576600790024, 0.019252397119998932, 0.019195545464754105, 0.019139036536216736, 0.01908285543322563, 0.01902700588107109, 0.018971487879753113, 0.018916286528110504, 0.018861401826143265, 0.01880684122443199, 0.018752597272396088, 0.01869867369532585, 0.018645040690898895, 0.01859172433614731, 0.01853870414197445, 0.01848599687218666, 0.0184335820376873, 0.018381472676992416, 0.018329650163650513, 0.018278125673532486, 0.01822689361870289, 0.018175937235355377, 0.0181252621114254, 0.01807487942278385, 0.018024779856204987, 0.01797494851052761, 0.01792539469897747, 0.017876114696264267, 0.0178271122276783, 0.017778366804122925, 0.017729882150888443, 0.017681676894426346, 0.017633728682994843, 0.01758604124188423, 0.017538612708449364, 0.017491435632109642, 0.017444506287574768, 0.017397843301296234, 0.017351416870951653, 0.01730523258447647, 0.017259307205677032, 0.017213625833392143, 0.017168192192912102, 0.017122982069849968, 0.017078010365366936, 0.017033280804753304, 0.016988782212138176, 0.016944529488682747, 0.01690048538148403, 0.016856681555509567, 0.016813097521662712, 0.016769759356975555, 0.016726627945899963, 0.01668372191488743, 0.01664102077484131, 0.016598554328083992, 0.016556303948163986, 0.016514264047145844, 0.016472432762384415, 0.016430824995040894, 0.016389409080147743, 0.0163482204079628, 0.016307227313518524, 0.01626645401120186, 0.016225868836045265, 0.016185499727725983, 0.016145318746566772, 0.016105342656373978, 0.01606556586921215, 0.016025977209210396, 0.015986597165465355, 0.015947403386235237, 0.015908408910036087, 0.015869593247771263, 0.015830975025892258, 0.015792537480592728, 0.01575428992509842, 0.015716219320893288, 0.01567832939326763, 0.01564064435660839, 0.015603124164044857, 0.015565778128802776, 0.015528624877333641, 0.01549164392054081, 0.01545484084635973, 0.01541820727288723, 0.015381750650703907, 0.015345468185842037, 0.015309352427721024, 0.01527340803295374, 0.015237616375088692, 0.015202010050415993, 0.015166568569839, 0.015131289139389992, 0.015096166171133518, 0.0150612136349082, 0.015026427805423737, 0.014991790056228638, 0.014957324601709843, 0.014923018403351307, 0.014888865873217583, 0.01485486887395382, 0.014821025542914867, 0.014787348918616772, 0.014753805473446846, 0.014720415696501732, 0.014687180519104004, 0.014654100872576237, 0.01462116464972496, 0.014588368125259876, 0.014555740170180798, 0.014523230493068695, 0.014490890316665173, 0.014458680525422096, 0.014426631852984428, 0.014394722878932953, 0.014362944290041924, 0.01433132030069828, 0.01429982203990221, 0.014268457889556885, 0.014237234368920326, 0.014206149615347385, 0.014175190590322018, 0.014144386164844036, 0.014113698154687881, 0.014083152636885643, 0.014052736572921276, 0.014022455550730228, 0.013992296531796455, 0.013962272554636002, 0.013932373374700546, 0.013902622275054455, 0.013872980140149593, 0.013843467459082603, 0.013814077712595463, 0.01378481462597847, 0.013755671679973602, 0.013726655393838882, 0.013697751797735691, 0.01366897951811552, 0.013640315271914005, 0.01361178606748581, 0.013583367690443993, 0.013555066660046577, 0.013526885770261288, 0.01349882036447525, 0.013470884412527084, 0.013443049974739552, 0.013415336608886719, 0.013387740589678288, 0.013360254466533661, 0.013332877308130264, 0.013305635191500187, 0.013278481550514698, 0.013251448050141335, 0.013224517926573753, 0.013197695836424828, 0.013170987367630005, 0.013144386000931263, 0.013117888942360878, 0.013091490603983402, 0.013065210543572903, 0.01303903479129076, 0.013012951239943504, 0.012986983172595501, 0.012961126863956451, 0.012935347855091095, 0.012909691780805588, 0.012884140014648438, 0.012858685106039047, 0.012833324261009693, 0.012808071449398994, 0.012782922945916653, 0.012757867574691772, 0.012732910923659801, 0.012708064168691635, 0.012683290988206863, 0.012658625841140747, 0.012634054757654667, 0.012609578669071198, 0.012585198506712914, 0.012560906819999218, 0.012536711990833282, 0.012512611225247383, 0.012488599866628647, 0.012464679777622223, 0.012440850958228111, 0.012417115271091461, 0.012393467128276825, 0.01236991211771965, 0.012346451170742512, 0.012323069386184216, 0.012299779802560806, 0.012276582419872284, 0.012253474444150925, 0.012230447493493557, 0.01220751740038395, 0.012184670194983482, 0.012161901220679283, 0.01213922630995512, 0.012116632424294949, 0.012094126082956791, 0.012071695178747177, 0.012049359269440174, 0.012027101591229439, 0.012004919350147247, 0.011982819996774197, 0.011960810050368309, 0.011938877403736115, 0.011917012743651867, 0.01189524307847023, 0.011873540468513966, 0.011851922608911991, 0.011830383911728859, 0.01180893275886774, 0.011787539348006248, 0.011766238138079643, 0.011745008639991283, 0.011723853647708893, 0.01170278713107109, 0.011681786738336086, 0.011660866439342499, 0.011640023440122604, 0.011619243770837784, 0.011598551645874977, 0.01157793402671814, 0.011557374149560928, 0.011536904610693455, 0.011516503058373928, 0.011496172286570072, 0.011475921608507633, 0.011455731466412544, 0.011435611173510551, 0.011415582150220871, 0.011395602487027645, 0.011375694535672665, 0.01135585643351078, 0.011336083523929119, 0.011316383257508278, 0.011296744458377361, 0.011277178302407265, 0.011257678270339966, 0.011238238774240017, 0.011218883097171783, 0.011199580505490303, 0.01118034590035677, 0.011161179281771183, 0.011142078787088394, 0.011123034171760082, 0.011104064993560314, 0.01108515728265047, 0.011066317558288574, 0.01104754488915205, 0.011028826236724854, 0.0110101830214262, 0.01099159475415945, 0.010973077267408371, 0.010954611003398895, 0.01093621738255024, 0.010917886160314083, 0.010899608954787254, 0.010881399735808372, 0.010863247327506542, 0.010845160111784935, 0.010827148333191872, 0.010809175670146942, 0.010791275650262833, 0.010773427784442902, 0.010755636729300022, 0.010737907141447067, 0.010720236226916313, 0.010702623054385185, 0.010685062035918236, 0.010667573660612106, 0.010650125332176685, 0.010632737539708614, 0.010615409351885319, 0.010598130524158478, 0.010580918751657009, 0.010563752613961697, 0.010546651668846607, 0.010529591701924801, 0.010512597858905792, 0.010495648719370365, 0.010478755459189415, 0.01046192366629839, 0.010445140302181244, 0.010428410954773426, 0.010411742143332958, 0.010395115241408348, 0.010378550738096237, 0.010362026281654835, 0.01034557819366455, 0.010329164564609528, 0.010312809608876705, 0.010296506807208061, 0.010280255228281021, 0.01026405580341816, 0.010247906669974327, 0.010231805965304375, 0.010215753689408302, 0.01019976008683443, 0.010183824226260185, 0.010167925618588924, 0.010152066126465797, 0.010136292316019535, 0.010120546445250511, 0.010104848071932793, 0.01008920930325985, 0.010073610581457615, 0.010058061219751835, 0.010042560286819935, 0.010027103126049042, 0.010011697188019753, 0.009996342472732067, 0.009981030598282814, 0.009965762495994568, 0.009950540028512478, 0.009935375303030014, 0.009920244105160236, 0.009905153885483742, 0.00989012885838747, 0.009875130839645863, 0.009860186837613583, 0.00984528660774231, 0.009830429218709469, 0.009815610945224762, 0.009800847619771957, 0.009786119684576988, 0.00977144856005907, 0.00975680910050869, 0.00974221620708704, 0.009727670811116695, 0.009713170118629932, 0.009698702953755856, 0.009684288874268532, 0.009669915772974491, 0.00965557899326086, 0.00964128877967596, 0.009627040475606918, 0.00961282942444086, 0.009598658420145512, 0.009584545157849789, 0.009570457972586155, 0.009556428529322147, 0.009542430751025677, 0.009528476744890213, 0.00951455906033516, 0.009500687010586262, 0.009486845694482327, 0.009473067708313465, 0.009459313005208969, 0.009445608593523502, 0.009431927464902401, 0.00941829476505518, 0.009404707700014114, 0.009391160681843758, 0.009377644397318363, 0.009364182129502296, 0.009350746870040894, 0.00933736003935337, 0.009324000217020512, 0.009310691617429256, 0.009297401644289494, 0.00928416382521391, 0.009270966984331608, 0.009257792495191097, 0.009244668297469616, 0.009231572970747948, 0.009218519553542137, 0.009205501526594162, 0.009192511439323425, 0.009179568849503994, 0.009166655130684376, 0.009153790771961212, 0.00914094503968954, 0.0091281458735466, 0.009115377441048622, 0.009102646261453629, 0.009089949540793896, 0.009077288210391998, 0.009064658544957638, 0.009052070789039135, 0.009039511904120445, 0.009026985615491867, 0.00901450589299202, 0.009002056904137135, 0.008989628404378891, 0.008977248333394527, 0.008964898064732552, 0.008952583186328411, 0.00894029438495636, 0.008928051218390465, 0.008915829472243786, 0.008903641253709793, 0.008891492150723934, 0.008879383094608784, 0.008867292664945126, 0.0088552450761199, 0.008843227289617062, 0.008831238374114037, 0.0088192792609334, 0.00880736205726862, 0.008795462548732758, 0.008783616125583649, 0.008771789260208607, 0.00875999964773655, 0.008748234249651432, 0.008736498653888702, 0.008724815212190151, 0.008713137358427048, 0.00870150700211525, 0.008689898066222668, 0.008678330108523369, 0.008666795678436756, 0.008655278943479061, 0.008643806912004948, 0.008632354438304901, 0.008620933629572392, 0.008609545417129993, 0.008598193526268005, 0.008586866781115532, 0.00857557449489832, 0.00856431107968092, 0.008553066290915012, 0.00854188296943903, 0.008530696853995323, 0.0085195517167449, 0.008508438244462013, 0.00849735178053379, 0.008486300706863403, 0.008475268259644508, 0.008464280515909195, 0.008453297428786755, 0.008442363701760769, 0.008431445807218552, 0.008420557714998722, 0.008409702219069004, 0.008398869074881077, 0.008388069458305836, 0.008377295918762684, 0.008366545662283897, 0.008355831727385521, 0.008345132693648338, 0.008334473706781864, 0.008323834277689457, 0.008313219994306564, 0.008302636444568634, 0.008292073383927345, 0.008281546644866467, 0.008271039463579655, 0.00826056208461523, 0.008250114507973194, 0.00823968555778265, 0.008229285478591919, 0.00821891613304615, 0.008208568207919598, 0.008198249153792858, 0.00818795058876276, 0.008177685551345348, 0.008167429827153683, 0.008157218806445599, 0.008147021755576134, 0.008136851713061333, 0.00812671147286892, 0.008116597309708595, 0.008106500841677189, 0.00809643417596817, 0.00808639731258154, 0.008076366037130356, 0.008066377602517605, 0.008056405000388622, 0.008046472445130348, 0.008036535233259201, 0.008026642724871635, 0.00801677256822586, 0.008006924763321877, 0.007997103035449982, 0.00798730831593275, 0.007977524772286415, 0.007967781275510788, 0.007958047091960907, 0.007948347367346287, 0.007938667200505733, 0.00792901124805212, 0.007919371128082275, 0.007909778505563736, 0.007900181226432323, 0.007890617474913597, 0.007881076075136662, 0.007871560752391815, 0.007862064987421036, 0.007852593436837196, 0.007843147031962872, 0.007833724841475487, 0.007824317552149296, 0.007814938202500343, 0.007805581670254469, 0.0077962446957826614, 0.007786931935697794, 0.007777645718306303, 0.007768371608108282, 0.007759136147797108, 0.007749906741082668, 0.007740712724626064, 0.00773153081536293, 0.007722381502389908, 0.007713246159255505, 0.007704134564846754, 0.007695045322179794, 0.007685979828238487, 0.007676927372813225, 0.007667903788387775, 0.00765890022739768, 0.007649928797036409, 0.007640963885933161, 0.007632033433765173, 0.007623111829161644, 0.0076142167672514915, 0.007605339400470257, 0.007596494629979134, 0.007587661035358906, 0.007578848395496607, 0.007570060435682535, 0.007561282720416784, 0.007552536204457283, 0.007543810643255711, 0.007535101845860481, 0.007526407018303871, 0.007517742458730936, 0.007509091403335333, 0.00750045757740736, 0.00749184750020504, 0.007483258377760649, 0.0074746813625097275, 0.007466130889952183, 0.007457602769136429, 0.0074490890838205814, 0.007440594024956226, 0.007432121783494949, 0.007423659786581993, 0.007415228057652712, 0.007406814023852348, 0.007398413494229317, 0.007390039041638374, 0.0073816776275634766, 0.00737333670258522, 0.007365015335381031, 0.007356700953096151, 0.007348412182182074, 0.007340153679251671, 0.0073319124057888985, 0.007323676720261574, 0.007315460592508316, 0.007307269610464573, 0.007299093063920736, 0.007290935609489679, 0.007282801903784275, 0.007274670526385307, 0.007266576401889324, 0.0072584873996675014, 0.007250417955219746, 0.007242375984787941, 0.00723434379324317, 0.0072263265028595924, 0.007218333892524242, 0.007210352923721075, 0.0072023929096758366, 0.007194451056420803, 0.007186520844697952, 0.007178615313023329, 0.007170721888542175, 0.007162848487496376, 0.007154995109885931, 0.007147153839468956, 0.007139327470213175, 0.007131523452699184, 0.007123734336346388, 0.007115961983799934, 0.007108209189027548, 0.00710047222673893, 0.00709275109693408, 0.007085044402629137, 0.007077352609485388, 0.007069683168083429, 0.007062026299536228, 0.007054388057440519, 0.007046771701425314, 0.007039153948426247, 0.007031569257378578, 0.007024005055427551, 0.007016440853476524, 0.007008907850831747, 0.007001371588557959, 0.006993868853896856, 0.006986378226429224, 0.006978901568800211, 0.006971440277993679, 0.006963989697396755, 0.006956565193831921, 0.006949152797460556, 0.006941754836589098, 0.006934370379894972, 0.006927005480974913, 0.006919649429619312, 0.00691232131794095, 0.006904997862875462, 0.006897692568600178, 0.006890406832098961, 0.0068831308744847775, 0.006875867955386639, 0.006868631113320589, 0.006861405447125435, 0.006854191422462463, 0.006846996955573559, 0.006839805748313665, 0.006832651328295469, 0.006825484801083803, 0.00681835412979126, 0.006811228580772877, 0.006804130505770445, 0.006797031965106726, 0.006789958570152521, 0.00678289495408535, 0.006775849498808384, 0.0067688170820474625, 0.0067617930471897125, 0.006754789501428604, 0.006747799459844828, 0.006740829441696405, 0.0067338645458221436, 0.0067269206047058105, 0.00671999529004097, 0.006713078822940588, 0.006706177722662687, 0.006699288263916969, 0.006692416034638882, 0.006685548461973667, 0.00667871069163084, 0.006671878509223461, 0.006665067747235298, 0.006658259779214859, 0.006651477422565222, 0.0066447025164961815, 0.006637943908572197, 0.006631198339164257, 0.006624465808272362, 0.006617764011025429, 0.006611051503568888, 0.006604357156902552, 0.00659768283367157, 0.006591021548956633, 0.006584377959370613, 0.006577745079994202, 0.0065711187198758125, 0.006564512383192778, 0.006557926069945097, 0.006551347207278013, 0.0065447743982076645, 0.006538227666169405, 0.006531683728098869, 0.006525161676108837, 0.006518653593957424, 0.006512152496725321, 0.006505663972347975, 0.006499183364212513, 0.006492726970463991, 0.006486285477876663, 0.006479848176240921, 0.006473428104072809, 0.006467009894549847, 0.006460616365075111, 0.006454231683164835, 0.006447855848819017, 0.006441492587327957, 0.006435150280594826, 0.006428818218410015, 0.006422500591725111, 0.0064161852933466434, 0.006409894675016403, 0.00640359940007329, 0.006397326476871967, 0.006391067057847977, 0.006384817883372307, 0.006378581747412682, 0.006372362375259399, 0.006366144400089979, 0.006359945051372051, 0.006353757344186306, 0.00634758872911334, 0.006341420579701662, 0.006335269659757614, 0.006329124793410301, 0.006323000881820917, 0.006316883955150843, 0.006310780066996813, 0.006304674781858921, 0.006298597902059555, 0.006292534060776234, 0.006286469753831625, 0.006280425935983658, 0.006274391897022724, 0.0062683699652552605, 0.006262357346713543, 0.00625635264441371, 0.006250367034226656, 0.006244397722184658, 0.006238419562578201, 0.00623246468603611, 0.006226527038961649, 0.006220594514161348, 0.006214665714651346, 0.006208760663866997, 0.006202866323292255, 0.006196971982717514, 0.006191100459545851, 0.0061852335929870605, 0.006179377902299166, 0.006173540838062763, 0.0061677005141973495, 0.006161878816783428, 0.006156077608466148, 0.006150275003165007, 0.006144484970718622, 0.006138714030385017, 0.006132945418357849, 0.0061271898448467255, 0.006121443118900061, 0.006115708965808153, 0.006109983194619417, 0.006104275118559599, 0.006098574493080378, 0.006092878058552742, 0.006087201647460461, 0.006081533618271351, 0.006075863726437092, 0.006070215255022049, 0.006064583547413349, 0.006058948114514351, 0.006053332705050707, 0.006047731731086969, 0.006042126566171646, 0.006036539562046528, 0.006030960474163294, 0.006025394890457392, 0.006019837688654661, 0.006014289800077677, 0.0060087586753070354, 0.0060032266192138195, 0.005997713189572096, 0.0059922123327851295, 0.0059867138043046, 0.005981224589049816, 0.005975754931569099, 0.005970277823507786, 0.005964819807559252, 0.005959382280707359, 0.0059539503417909145, 0.00594851840287447, 0.005943107418715954, 0.005937708541750908, 0.005932298488914967, 0.00592691358178854, 0.005921542644500732, 0.005916171707212925, 0.005910817999392748, 0.005905468948185444, 0.005900128278881311, 0.00589480297639966, 0.005889481399208307, 0.005884159822016954, 0.0058788699097931385, 0.005873576272279024, 0.005868298467248678, 0.005863024387508631, 0.0058577642776072025, 0.005852504167705774, 0.005847269669175148, 0.005842023994773626, 0.005836799740791321, 0.005831591319292784, 0.005826386157423258, 0.005821180995553732, 0.005816005636006594, 0.005810820963233709, 0.005805652588605881, 0.005800487939268351, 0.005795335862785578, 0.005790191702544689, 0.005785058252513409, 0.005779941566288471, 0.0057748244144022465, 0.0057697175070643425, 0.005764626432210207, 0.005759526509791613, 0.005754453130066395, 0.005749385338276625, 0.0057443189434707165, 0.005739267915487289, 0.005734228994697332, 0.005729195661842823, 0.005724175367504358, 0.005719155538827181, 0.0057141417637467384, 0.005709141492843628, 0.005704149603843689, 0.005699170753359795, 0.005694202147424221, 0.005689234007149935, 0.005684277042746544, 0.005679322872310877, 0.00567438080906868, 0.005669455975294113, 0.005664539989084005, 0.005659622605890036, 0.005654714535921812, 0.0056498064659535885, 0.005644924007356167, 0.005640046671032906, 0.005635174456983805, 0.005630312487483025, 0.005625460296869278, 0.0056206099689006805, 0.005615769419819117, 0.005610944237560034, 0.005606110207736492, 0.0056013073772192, 0.005596510600298643, 0.005591703578829765, 0.005586917977780104, 0.005582140292972326, 0.005577368661761284, 0.005572600290179253, 0.005567850545048714, 0.0055630989372730255, 0.005558360368013382, 0.005553624592721462, 0.005548907443881035, 0.005544192157685757, 0.0055394768714904785, 0.005534785334020853, 0.005530092865228653, 0.005525416228920221, 0.005520735401660204, 0.0055160666815936565, 0.005511409603059292, 0.005506751127541065, 0.005502108950167894, 0.005497486796230078, 0.005492856726050377, 0.005488222930580378, 0.005483622662723064, 0.005479016341269016, 0.005474422127008438, 0.005469826515763998, 0.005465254653245211, 0.005460682325065136, 0.0054561118595302105, 0.005451558157801628, 0.005447012837976217, 0.0054424721747636795, 0.005437937565147877, 0.0054334234446287155, 0.005428884644061327, 0.005424382630735636, 0.00541987968608737, 0.005415388382971287, 0.005410896148532629, 0.005406424403190613, 0.005401948466897011, 0.00539748091250658, 0.005393031053245068, 0.005388566758483648, 0.005384128075093031, 0.005379693582653999, 0.00537527073174715, 0.005370853003114462, 0.005366436671465635, 0.005362031050026417, 0.005357644986361265, 0.005353246815502644, 0.005348869599401951, 0.005344492848962545, 0.00534012308344245, 0.005335765890777111, 0.005331411492079496, 0.00532706780359149, 0.005322725046426058, 0.005318397656083107, 0.005314073525369167, 0.005309766624122858, 0.0053054471500217915, 0.005301150493323803, 0.005296857561916113, 0.00529256509616971, 0.005288287997245789, 0.005284017883241177, 0.005279744043946266, 0.0052754865027964115, 0.005271235015243292, 0.005266985855996609, 0.0052627455443143845, 0.005258512683212757, 0.005254288204014301, 0.005250072572380304, 0.0052458541467785835, 0.005241646897047758, 0.005237448029220104, 0.005233259405940771, 0.0052290731109678745, 0.005224897991865873, 0.0052207279950380325, 0.005216555204242468, 0.005212402902543545, 0.005208251066505909, 0.0052040982991456985, 0.005199959967285395, 0.005195829086005688, 0.005191700533032417, 0.005187581293284893, 0.0051834662444889545, 0.005179364234209061, 0.005175260826945305, 0.005171166732907295, 0.005167079158127308, 0.00516300555318594, 0.005158929619938135, 0.005154858343303204, 0.005150794517248869, 0.0051467507146298885, 0.005142691545188427, 0.005138645879924297, 0.005134621635079384, 0.005130586680024862, 0.005126559641212225, 0.005122544709593058, 0.005118531174957752, 0.0051145292818546295, 0.005110536236315966, 0.005106537137180567, 0.005102549679577351, 0.005098577588796616, 0.005094596184790134, 0.005090631078928709, 0.005086671095341444, 0.005082720424979925, 0.00507876044139266, 0.005074827466160059, 0.005070884246379137, 0.005066949874162674, 0.005063030868768692, 0.0050591095350682735, 0.0050552012398839, 0.005051286891102791, 0.005047392100095749, 0.005043498706072569, 0.005039608106017113, 0.005035726353526115, 0.00503184599801898, 0.0050279865972697735, 0.005024113692343235, 0.005020256619900465, 0.005016403738409281, 0.0050125508569180965, 0.005008709616959095, 0.0050048744305968285, 0.005001053214073181, 0.004997221753001213, 0.0049933986738324165, 0.004989601206034422, 0.004985798615962267, 0.00498198764398694, 0.00497819110751152, 0.004974403418600559, 0.0049706194549798965, 0.00496684480458498, 0.004963070619851351, 0.0049593085423111916, 0.00495555205270648, 0.004951791372150183, 0.004948044195771217, 0.004944306798279285, 0.00494055962190032, 0.0049368287436664104, 0.004933102056384087, 0.004929375369101763, 0.004925672430545092, 0.0049219559878110886, 0.004918253049254417, 0.004914553835988045, 0.00491086533293128, 0.004907181952148676, 0.0049034953117370605, 0.004899811930954456, 0.004896145313978195, 0.004892486147582531, 0.004888809751719236, 0.004885162226855755, 0.004881523549556732, 0.004877867177128792, 0.004874227102845907, 0.004870608914643526, 0.004866969771683216, 0.004863359499722719, 0.0048597343266010284, 0.004856116138398647, 0.004852514714002609, 0.004848916549235582, 0.004845325835049152, 0.004841725341975689, 0.004838145803660154, 0.004834564868360758, 0.004830995108932257, 0.004827428609132767, 0.004823857918381691, 0.004820303991436958, 0.004816750064492226, 0.004813203122466803, 0.0048096622340381145, 0.004806118551641703, 0.004802593495696783, 0.004799061454832554, 0.00479554571211338, 0.0047920201905071735, 0.004788513295352459, 0.00478500546887517, 0.004781506489962339, 0.004778003320097923, 0.004774508997797966, 0.004771034233272076, 0.004767553880810738, 0.004764073062688112, 0.004760598763823509, 0.0047571416944265366, 0.004753674380481243, 0.004750218242406845, 0.004746775142848492, 0.004743324592709541, 0.004739878699183464, 0.004736447241157293, 0.0047330111265182495, 0.004729589447379112, 0.0047261668369174, 0.0047227549366652966, 0.004719341639429331, 0.004715931136161089, 0.00471253227442503, 0.004709131550043821, 0.004705744795501232, 0.004702357575297356, 0.004698978271335363, 0.004695598967373371, 0.004692218732088804, 0.004688865039497614, 0.004685496911406517, 0.004682138096541166, 0.004678794182837009, 0.0046754442155361176, 0.0046720951795578, 0.004668761044740677, 0.00466542411595583, 0.00466209277510643, 0.004658769816160202, 0.00465544406324625, 0.00465213181450963, 0.004648829344660044, 0.004645520355552435, 0.004642218817025423, 0.004638929385691881, 0.004635631572455168, 0.004632351454347372, 0.004629063419997692, 0.004625784698873758, 0.004622514359652996, 0.004619238432496786, 0.004615978337824345, 0.004612721502780914, 0.0046094683930277824, 0.004606213420629501, 0.004602967295795679, 0.004599733278155327, 0.004596492275595665, 0.0045932685025036335, 0.004590036813169718, 0.004586820490658283, 0.00458359532058239, 0.004580385517328978, 0.004577173851430416, 0.004573964513838291, 0.004570768214762211, 0.004567568190395832, 0.004564371891319752, 0.004561194684356451, 0.004558010026812553, 0.004554837476462126, 0.004551658406853676, 0.004548491910099983, 0.004545321688055992, 0.00454216543585062, 0.004539003595709801, 0.004535853397101164, 0.004532709252089262, 0.004529571160674095, 0.004526419099420309, 0.004523288458585739, 0.00452016107738018, 0.004517039749771357, 0.004513923544436693, 0.004510801285505295, 0.004507682751864195, 0.004504579119384289, 0.00450146896764636, 0.004498376976698637, 0.004495282657444477, 0.004492189269512892, 0.004489099606871605, 0.004486015532165766, 0.004482931923121214, 0.004479861818253994, 0.004476784262806177, 0.004473729524761438, 0.004470666870474815, 0.004467600490897894, 0.0044645508751273155, 0.004461502656340599, 0.004458462353795767, 0.004455415531992912, 0.004452375695109367, 0.004449343308806419, 0.004446316976100206, 0.0044432892464101315, 0.00444027129560709, 0.004437252879142761, 0.004434248432517052, 0.004431235138326883, 0.004428233951330185, 0.004425229504704475, 0.004422229714691639, 0.004419239237904549, 0.004416257608681917, 0.004413270857185125, 0.004410282243043184, 0.004407315980643034, 0.004404345061630011, 0.004401376936584711, 0.004398414399474859, 0.004395452328026295, 0.004392491187900305, 0.004389539826661348, 0.004386590328067541, 0.00438365014269948, 0.004380711819976568, 0.004377778619527817, 0.004374845419079065, 0.004371915943920612, 0.004368987400084734, 0.004366070032119751, 0.004363157320767641, 0.004360240884125233, 0.004357333295047283, 0.004354429896920919, 0.004351525567471981, 0.0043486375361680984, 0.0043457369320094585, 0.004342850763350725, 0.004339957144111395, 0.0043370844796299934, 0.004334202501922846, 0.004331324715167284, 0.0043284534476697445, 0.00432558823376894, 0.004322721157222986, 0.004319870378822088, 0.004317014943808317, 0.00431416928768158, 0.00431131012737751, 0.0043084691278636456, 0.004305627662688494, 0.004302798304706812, 0.004299953579902649, 0.004297131672501564, 0.004294300451874733, 0.004291480407118797, 0.004288668744266033, 0.004285851493477821, 0.004283036570996046, 0.0042802379466593266, 0.0042774309404194355, 0.004274636507034302, 0.004271843936294317, 0.004269039258360863, 0.0042662532068789005, 0.004263469483703375, 0.004260695539414883, 0.004257910419255495, 0.004255139734596014, 0.004252362996339798, 0.0042496006935834885, 0.004246838856488466, 0.004244076553732157, 0.004241325426846743, 0.0042385742999613285, 0.004235823173075914, 0.004233075305819511, 0.004230329301208258, 0.004227601457387209, 0.004224870353937149, 0.0042221322655677795, 0.0042194039560854435, 0.004216685425490141, 0.0042139580473303795, 0.004211234860122204, 0.004208529368042946, 0.004205819219350815, 0.004203109070658684, 0.004200404975563288, 0.004197710659354925, 0.004195008892565966, 0.004192324820905924, 0.004189627710729837, 0.004186946898698807, 0.004184267949312925, 0.004181584808975458, 0.00417891051620245, 0.004176233895123005, 0.004173563327640295, 0.004170895088464022, 0.004168242681771517, 0.004165584221482277, 0.0041629234328866005, 0.004160268232226372, 0.004157631192356348, 0.00415497412905097, 0.004152338951826096, 0.00414970563724637, 0.00414706626906991, 0.0041444264352321625, 0.004141802899539471, 0.004139179363846779, 0.0041365595534443855, 0.00413393834605813, 0.004131323657929897, 0.004128712695091963, 0.004126102663576603, 0.004123499616980553, 0.004120893310755491, 0.004118297714740038, 0.004115699790418148, 0.004113112576305866, 0.004110523033887148, 0.004107933957129717, 0.004105350933969021, 0.004102767910808325, 0.00410020025447011, 0.004097626078873873, 0.004095055628567934, 0.004092490766197443, 0.004089930560439825, 0.004087371286004782, 0.004084801767021418, 0.00408225879073143, 0.004079708829522133, 0.004077162593603134, 0.004074613098055124, 0.004072075709700584, 0.004069541115313768, 0.004066993948072195, 0.004064470995217562, 0.0040619466453790665, 0.004059417173266411, 0.004056899342685938, 0.004054379649460316, 0.004051855765283108, 0.004049350041896105, 0.004046835005283356, 0.00404432462528348, 0.00404182355850935, 0.004039324354380369, 0.004036827478557825, 0.004034343641251326, 0.004031848162412643, 0.004029355943202972, 0.004026869311928749, 0.004024391993880272, 0.004021911416202784, 0.004019427113234997, 0.00401696003973484, 0.004014498088508844, 0.0040120212361216545, 0.004009561147540808, 0.004007095005363226, 0.0040046414360404015, 0.004002185072749853, 0.003999735694378614, 0.003997281659394503, 0.003994845785200596, 0.0039923954755067825, 0.003989954479038715, 0.003987519536167383, 0.003985094837844372, 0.003982651513069868, 0.003980229143053293, 0.003977808635681868, 0.003975386265665293, 0.003972968552261591, 0.003970547113567591, 0.003968134522438049, 0.003965719137340784, 0.003963314462453127, 0.003960914444178343, 0.003958515357226133, 0.003956112079322338, 0.003953714855015278, 0.003951329737901688, 0.003948931582272053, 0.003946543671190739, 0.003944166470319033, 0.003941773436963558, 0.003939406480640173, 0.003937033005058765, 0.0039346604607999325, 0.0039322893135249615, 0.0039299167692661285, 0.0039275577291846275, 0.003925189841538668, 0.0039228410460054874, 0.003920493647456169, 0.003918130416423082, 0.00391578720882535, 0.003913436084985733, 0.003911093343049288, 0.003908755257725716, 0.003906415309756994, 0.003904081182554364, 0.0039017510134726763, 0.0038994168862700462, 0.0038970871828496456, 0.0038947605062276125, 0.003892447566613555, 0.0038901311345398426, 0.0038878126069903374, 0.003885496873408556, 0.003883186262100935, 0.003880887059494853, 0.0038785787764936686, 0.0038762763142585754, 0.0038739782758057117, 0.003871689550578594, 0.0038693943060934544, 0.003867097431793809, 0.0038648112677037716, 0.003862527897581458, 0.003860239638015628, 0.0038579662796109915, 0.0038556938525289297, 0.0038534151390194893, 0.003851146437227726, 0.0038488840218633413, 0.0038466041442006826, 0.0038443508092314005, 0.0038420867640525103, 0.00383983226493001, 0.003837574040517211, 0.0038353290874511003, 0.003833071794360876, 0.003830827074125409, 0.003828583285212517, 0.0038263422902673483, 0.003824104554951191, 0.003821869380772114, 0.0038196356035768986, 0.003817410673946142, 0.0038151752669364214, 0.003812953596934676, 0.0038107316941022873, 0.003808504668995738, 0.0038062878884375095, 0.0038040759973227978, 0.0038018650375306606, 0.0037996619939804077, 0.0037974556908011436, 0.0037952458951622248, 0.0037930470425635576, 0.003790851216763258, 0.0037886514328420162, 0.0037864618934690952, 0.003784267930313945, 0.003782084211707115, 0.003779900958761573, 0.0037777144461870193, 0.003775539342314005, 0.003773351199924946, 0.0037711793556809425, 0.0037690079770982265, 0.0037668340373784304, 0.0037646668497473, 0.003762501524761319, 0.0037603434175252914, 0.003758183214813471, 0.0037560253404080868, 0.0037538735195994377, 0.0037517284508794546, 0.003749563591554761, 0.0037474273703992367, 0.003745279274880886, 0.003743140958249569, 0.003741000546142459, 0.0037388682831078768, 0.0037367427721619606, 0.003734600730240345, 0.0037324661388993263, 0.0037303445860743523, 0.003728220472112298, 0.0037261012475937605, 0.003723978064954281, 0.003721862332895398, 0.003719756845384836, 0.0037176429759711027, 0.003715537255629897, 0.003713421756401658, 0.0037113225553184748, 0.003709223819896579, 0.0037071171682327986, 0.0037050226237624884, 0.0037029392551630735, 0.003700842848047614, 0.003698752261698246, 0.0036966705229133368, 0.0036945862229913473, 0.0036924993619322777, 0.0036904250737279654, 0.0036883431021124125, 0.0036862650886178017, 0.003684196388348937, 0.003682132577523589, 0.0036800571251660585, 0.003677995875477791, 0.0036759248469024897, 0.0036738549824804068, 0.0036718049086630344, 0.0036697506438940763, 0.003667698707431555, 0.0036656439770013094, 0.0036636008881032467, 0.0036615515127778053, 0.003659503534436226, 0.0036574676632881165, 0.0036554252728819847, 0.0036533779930323362, 0.0036513442173600197, 0.0036493095103651285, 0.003647285746410489, 0.0036452533677220345, 0.0036432272754609585, 0.003641207702457905, 0.0036391806788742542, 0.0036371545866131783, 0.003635138040408492, 0.0036331156734377146, 0.003631112864241004, 0.003629101440310478, 0.0036271053832024336, 0.0036250886041671038, 0.003623075783252716, 0.003621078794822097, 0.003619077615439892, 0.0036170827224850655, 0.003615077119320631, 0.0036130857188254595, 0.003611101768910885, 0.0036091154906898737, 0.0036071205977350473, 0.0036051380448043346, 0.0036031478084623814, 0.003601175732910633, 0.003599202958866954, 0.0035972262267023325, 0.0035952541511505842, 0.00359327532351017, 0.003591298358514905, 0.003589337458834052, 0.003587366547435522, 0.0035854089073836803, 0.0035834566224366426, 0.003581494325771928, 0.003579525277018547, 0.0035775804426521063, 0.003575625829398632, 0.0035736828576773405, 0.003571727778762579, 0.0035697827115654945, 0.0035678374115377665, 0.003565895603969693, 0.0035639500711113214, 0.0035620250273495913, 0.003560083219781518, 0.003558150492608547, 0.0035562149714678526, 0.0035542920231819153, 0.0035523567348718643, 0.0035504368133842945, 0.0035485122352838516, 0.003546595573425293, 0.0035446779802441597, 0.0035427603870630264, 0.0035408451221883297, 0.0035389303229749203, 0.003537018783390522, 0.003535109106451273, 0.003533201292157173, 0.0035313009284436703, 0.003529398934915662, 0.003527495777234435, 0.0035255926195532084, 0.003523707389831543, 0.0035218046978116035, 0.0035199164412915707, 0.0035180291160941124, 0.003516140393912792, 0.003514248179271817, 0.003512369003146887, 0.0035104902926832438, 0.0035086097195744514, 0.00350672984495759, 0.0035048555582761765, 0.003502980573102832, 0.0035011086147278547, 0.003499237820506096, 0.0034973653964698315, 0.0034954994916915894, 0.003493637777864933, 0.0034917721059173346, 0.003489923197776079, 0.0034880610182881355, 0.003486201399937272, 0.0034843480680137873, 0.003482497064396739, 0.0034806516487151384, 0.0034788029734045267, 0.0034769601188600063, 0.003475105157122016, 0.0034732650965452194, 0.003471420146524906, 0.0034695849753916264, 0.003467750269919634, 0.0034659230150282383, 0.003464088076725602, 0.0034622522071003914, 0.003460422856733203, 0.0034585981629788876, 0.0034567713737487793, 0.0034549504052847624, 0.003453125711530447, 0.0034513070713728666, 0.0034494956489652395, 0.0034476756118237972, 0.0034458618611097336, 0.003444056725129485, 0.0034422334283590317, 0.003440435277298093, 0.0034386313054710627, 0.003436820115894079, 0.003435020800679922, 0.003433224745094776, 0.003431426826864481, 0.003429633332416415, 0.0034278377424925566, 0.0034260412212461233, 0.0034242537803947926, 0.0034224584233015776, 0.0034206712152808905, 0.0034188912250101566, 0.003417106345295906, 0.0034153240267187357, 0.00341355474665761, 0.0034117656759917736, 0.0034099863842129707, 0.0034082222264260054, 0.0034064408391714096, 0.0034046685323119164, 0.0034028973896056414, 0.003401136491447687, 0.0033993732649832964, 0.003397610504180193, 0.003395848209038377, 0.0033940915018320084, 0.0033923315349966288, 0.003390578320249915, 0.003388826036825776, 0.0033870702609419823, 0.00338532030582428, 0.003383568488061428, 0.0033818252850323915, 0.0033800797536969185, 0.003378335852175951, 0.003376592416316271, 0.003374855499714613, 0.003373126033693552, 0.0033713849261403084, 0.003369644982740283, 0.003367908298969269, 0.0033661862835288048, 0.0033644542563706636, 0.003362729912623763, 0.0033610048703849316, 0.0033592835534363985, 0.0033575627021491528, 0.003355837194249034, 0.003354121930897236, 0.003352406434714794, 0.003350687911733985, 0.003348973346874118, 0.003347266698256135, 0.003345555393025279, 0.003343846881762147, 0.0033421427942812443, 0.003340437775477767, 0.0033387348521500826, 0.003337039379402995, 0.0033353427425026894, 0.00333363632671535, 0.0033319422509521246, 0.0033302498050034046, 0.0033285534009337425, 0.0033268711995333433, 0.0033251759596168995, 0.003323489800095558, 0.0033217985183000565, 0.0033201181795448065, 0.0033184350468218327, 0.003316758666187525, 0.0033150864765048027, 0.0033133989199995995, 0.003311724402010441, 0.0033100515138357878, 0.003308382350951433, 0.0033067038748413324, 0.003305044723674655, 0.00330337998457253, 0.0033017126843333244, 0.0033000472467392683, 0.003298384603112936, 0.0032967214938253164, 0.0032950721215456724, 0.0032934173941612244, 0.0032917545177042484, 0.003290100023150444, 0.003288449952378869, 0.003286802675575018, 0.0032851500436663628, 0.003283509984612465, 0.003281861310824752, 0.0032802210189402103, 0.0032785777002573013, 0.003276936709880829, 0.0032753010746091604, 0.0032736624125391245, 0.0032720190938562155, 0.0032703836914151907, 0.0032687594648450613, 0.0032671287190169096, 0.0032655009999871254, 0.003263872815296054, 0.003262249520048499, 0.0032606327440589666, 0.003259007353335619, 0.003257378237321973, 0.003255759831517935, 0.003254141891375184]\n\n\nThe logistic regression model has been fit perfectly to the training data.\n\nfind_accuracy(X_train, y_train)\n\nAccuracy: 1.0\n\n\nSo we achieved 100% accuracy.\nThen we must initialize the test data with the same parameters as the training data.\n\nX_test, y_test = classification_data(n_points = 50, noise = 0.5, p_dims = 100)\n\n\nfind_accuracy(X_test, y_test)\n\nAccuracy: 1.0\n\n\nWe can see that the logistic regression model has overfit to the training data and cannot classify the test data with the same accuracy. This it the danger of fitting a model too well to training data, as it is now not generalizable to other data.\n\n\n\nIn this blog post, I was able to investigate more about gradient descent and its application in solving the empirical risk minimization problem, specifically focusing on logistic regression. By implementing gradient descent in the logistic regression model, I gained a deeper understanding of how the algorithm works and how it can be customized to suit different classification needs.\nFurthermore, I explored a key variant of gradient descent called momentum, which allows logistic regression to achieve faster convergence. Through experiments and analysis, we observed the impact of momentum on the convergence speed on the logistic regression model.\nOverall, these experiments taught me valuable lessons in optimization techniques for machine learning models. Through this experience I learned the importance of different parameters though changing the value of beta, and the impact of overfitting on our training data. By combining theory with practical implementation and experimentation, I gained a comprehensive understanding of gradient descent and its variants in the context of logistic regression.\nAs we continue to learn various machine learning algorithms and optimization techniques, the knowledge and insights gained from this blog post will help me develop practices to build more complex and efficient models in the future."
  },
  {
    "objectID": "posts/post5/homework5.html#abstract",
    "href": "posts/post5/homework5.html#abstract",
    "title": " Implementing Logistic Regression ",
    "section": "",
    "text": "Link to source code (logistic.py)\nFor this blog post I implemented logistic regression and performed several experiments on my model. The first experiment I conducted was to see vanilla gradient descent. Vanilla gradient descent is when beta=0 and we were able to know that the model works because we saw loss decrease monotonically. The second experiment was to understand the benefits of momentum. By increasing the beta value we were able to see loss decrease faster than the vanilla gradient descent case. Then, finally, we conducted an experiment to see the potential harms of overfitting our data. By reaching 100% accuracy on training data, we could see the drawback directly by a lower accuracy rate on training data. Overall, I was able to learn more about implementing machine learning models and how to test their functionality. I was able to concretely understand the benefits of momentum and the drawbacks of overfitting."
  },
  {
    "objectID": "posts/post5/homework5.html#experiments",
    "href": "posts/post5/homework5.html#experiments",
    "title": " Implementing Logistic Regression ",
    "section": "",
    "text": "Before doing any experiments, I had to generate data for a classification problem.\n\nimport torch\n\ndef classification_data(n_points = 300, noise = 0.2, p_dims = 2):\n    \n    y = torch.arange(n_points) &gt;= int(n_points/2)\n    y = 1.0*y\n    X = y[:, None] + torch.normal(0.0, noise, size = (n_points,p_dims))\n    X = torch.cat((X, torch.ones((X.shape[0], 1))), 1)\n    \n    return X, y\n\nPlot the data\n\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\n\ndef plot_classification_data(X, y, ax):\n    targets = [0, 1]\n    markers = [\"o\" , \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(X[ix,0], X[ix,1], s = 20,  c = y[ix], facecolors = \"none\", edgecolors = \"darkgrey\", cmap = \"BrBG\", vmin = -2, vmax = 2, alpha = 0.5, marker = markers[i])\n    ax.set(xlabel = r\"$x_1$\", ylabel = r\"$x_2$\")\n    \n    \nfig, ax = plt.subplots(1, 1)\n\n# p_dims is 2\nX, y = classification_data(noise = 0.2)\nplot_classification_data(X, y, ax)\n\n\n\n\n\n\n\n\nCode to graph a straight line\n\ndef draw_line(w, x_min, x_max, ax, **kwargs):\n    w_ = w.flatten()\n    x = torch.linspace(x_min, x_max, 101)\n    y = -(w_[0]*x + w_[2])/w_[1]\n    l = ax.plot(x, y, **kwargs)\n\n\n\nThe first experiment that I performed was vanilla gradient descent: When p_dim = 2, when alpha is sufficiently small and beta=0.\nWant to see:\n\nGradient descent for logistic regression converges to a weight vector w that looks visually correct\n\nshow this by plot the decision boundary with the data\n\nLoss decreases monotonically: A monotonic function is a function which is either entirely nonincreasing or nondecreasing.\n\nshow this by plotting the loss over iterations\n\n\nFirst implement a training loop with graphs with a dividing line to visualize our progress.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = GradientDescentOptimizer(LR)\n\n# initialize for main loop\nloss_vec_van = []\n\nfor index in range(5000):\n    \n    # for vanilla gradient descent, alpha must be sufficiently small and beta must be 0\n    opt.step(X, y, alpha = 0.01, beta = 0)\n    loss = LR.loss(X, y).item()\n    loss_vec_van.append(loss)\n\n\ndef find_accuracy(X, y):\n\n    predictions = LR.predict(X)\n    correct_preds = (predictions == y).float()\n    accuracy = torch.mean(correct_preds)\n\n    print(f\"Accuracy: {accuracy.item()}\")\n\nfind_accuracy(X, y)\n\nAccuracy: 0.996666669845581\n\n\nPlot the loss over time over the 5000 iterations.\n\nimport numpy as np\n\ndef plot_loss(loss, label= \"\"):\n    plt.style.use('seaborn-v0_8-whitegrid')\n    plt.figure(figsize=(10, 6))\n\n    \n    plt.plot(loss, color = \"blue\", label=label)\n    plt.scatter(torch.arange(len(loss)), loss, color = \"slategrey\", s=5)\n    plt.gca().set(xlabel = \"Perceptron Iteration (Updates Only)\", ylabel = \"loss\")\n    \n    plt.title(f\"Final loss: {loss[len(loss)-1]:.3f}\")\n\nplot_loss(loss_vec_van)\n\n\n\n\n\n\n\n\nWe can see that the loss is decreasing monotonically over time through this graph of the loss. The negative slope shows us that the loss is in fact decreasing over time. In other words, our machine learning model is learning!\nPlot the final line separating the data\n\nfig, ax = plt.subplots(1, 1)\n\nplot_classification_data(X, y, ax)\n\ndraw_line(LR.w, x_min=-1, x_max=2, ax=ax, color=\"black\")\nax.set_title(f\"loss = {loss:.3f}\")\nax.set(xlim=(-1, 2), ylim=(-1, 2))\n\n\n\n\n\n\n\n\nWe can see that the dividing line almost perfectly divides the classes. In time, we could see the logistic regression training could become perfectly accurate."
  },
  {
    "objectID": "posts/post5/homework5.html#benefits-of-momentum",
    "href": "posts/post5/homework5.html#benefits-of-momentum",
    "title": " Implementing Logistic Regression ",
    "section": "",
    "text": "Our next experiment was to see the benefits of momentum. On the same data, gradient descent with momentum (e.g. beta=0.9) can converge to the correct weight vector in fewer iterations than vanilla gradient descent (with beta=0).\nWe want to see:\n\nA model that learns at a faster rate\n\nshow loss decreasing at a faster rate than when beta was 0\n\n\nFirst implement a training loop with graphs with a dividing line to visualize our progress.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = GradientDescentOptimizer(LR)\nX, y = classification_data(noise = 0.2)\n\n# initialize for main loop\nloss_vec_mom = []\n\nfor index in range(5000):\n    \n    # to see the benefits of momentum, alpha must be sufficiently small and beta must be 0.9\n    opt.step(X, y, alpha = 0.01, beta = 0.9)\n    loss = LR.loss(X, y).item()            \n    loss_vec_mom.append(loss)\n\nPlot the loss over time over the 5000 iterations.\n\nplt.plot(loss_vec_van, color = \"green\", label='Vanilla')\nplt.plot(loss_vec_mom, color = \"blue\", label='Momentum')\n\nplt.gca().set(xlabel = \"Perceptron Iteration (Updates Only)\", ylabel = \"loss\")\nplt.legend()\n\n\n\n\n\n\n\n\nThe faster declining slope of the loss shows that the larger beta value does in fact increase the learning speed of the machine learning model.\n\nfig, ax = plt.subplots(1, 1)\n\nplot_classification_data(X, y, ax)\n\ndraw_line(LR.w, x_min=-1, x_max=2, ax=ax, color=\"black\")\nax.set_title(f\"loss = {loss:.3f}\")\nax.set(xlim=(-1, 2), ylim=(-1, 2))\n\n\n\n\n\n\n\n\nWe can see the benefits of increase of momentum by viewing the improved dividing line. The increase in the beta value allows our logistic regression to improve at a much faster rate then when beta=0. We know that because with the same number of iterations, the loss decreased more, or in other words, the model learned to classify at a faster rate.\n\nfind_accuracy(X, y)\n\nAccuracy: 1.0\n\n\nA perfect accuracy rate!"
  },
  {
    "objectID": "posts/post5/homework5.html#overfitting",
    "href": "posts/post5/homework5.html#overfitting",
    "title": " Implementing Logistic Regression ",
    "section": "",
    "text": "Our final experiment was to show the danger of overfitting. To show this I need to generate some data where p_dim &gt; n_points and create an instance where the same logistic regression model has a 100% accuracy rate on training data.\nWant to see:\n\nPerfect accuracy for training data\nLess accurate classification for testing data with the exact same parameters\n\nFor overfitting, we need to generate data where p_dim &gt; n_points.\n\nX_train, y_train = classification_data(n_points = 50, noise = 0.5, p_dims = 100)\n\nGoal to achieve 100% accuracy with the training data.\n\n# initialize a Logistic Regression \nLR = LogisticRegression() \nopt = GradientDescentOptimizer(LR)\n\n# initialize for main loop\nloss_vec = []\n\nfor index in range(2000):\n   \n    opt.step(X_train, y_train, alpha = 0.01, beta = 0.9)\n    loss = LR.loss(X_train, y_train).item()\n    loss_vec.append(loss)\n\n\nprint(loss_vec)\n\n[0.633738100528717, 0.5438883304595947, 0.4618161916732788, 0.40402740240097046, 0.36823952198028564, 0.3463859558105469, 0.33207085728645325, 0.32158127427101135, 0.3129945993423462, 0.30535393953323364, 0.2981888949871063, 0.29127079248428345, 0.2844916582107544, 0.27780479192733765, 0.2711944878101349, 0.2646607458591461, 0.25821107625961304, 0.25185608863830566, 0.24560725688934326, 0.23947563767433167, 0.23347118496894836, 0.22760243713855743, 0.22187648713588715, 0.21629880368709564, 0.21087360382080078, 0.20560361444950104, 0.20049048960208893, 0.19553472101688385, 0.19073593616485596, 0.18609294295310974, 0.1816038191318512, 0.17726610600948334, 0.17307688295841217, 0.16903269290924072, 0.16512995958328247, 0.16136476397514343, 0.1577329784631729, 0.15423043072223663, 0.15085284411907196, 0.1475958526134491, 0.14445513486862183, 0.14142641425132751, 0.13850541412830353, 0.1356879472732544, 0.1329699158668518, 0.13034740090370178, 0.12781642377376556, 0.1253732591867447, 0.12301427125930786, 0.12073586136102676, 0.11853475868701935, 0.11640762537717819, 0.1143513098359108, 0.11236286163330078, 0.11043937504291534, 0.10857807099819183, 0.10677634924650192, 0.10503166168928146, 0.10334160178899765, 0.10170385986566544, 0.10011627525091171, 0.09857672452926636, 0.09708324074745178, 0.09563390910625458, 0.0942269116640091, 0.09286051988601685, 0.0915331095457077, 0.09024310111999512, 0.08898898959159851, 0.08776937425136566, 0.08658287674188614, 0.08542823046445847, 0.08430419862270355, 0.08320960402488708, 0.08214332908391953, 0.08110430091619492, 0.08009150624275208, 0.0791039913892746, 0.07814081013202667, 0.07720109820365906, 0.0762840062379837, 0.07538872957229614, 0.07451450824737549, 0.07366058975458145, 0.07282629609107971, 0.07201094925403595, 0.07121390104293823, 0.0704345628619194, 0.06967232376337051, 0.06892664730548859, 0.06819696724414825, 0.06748278439044952, 0.0667836144566536, 0.06609895825386047, 0.06542839109897614, 0.06477145105600357, 0.06412775814533234, 0.06349688023328781, 0.06287844479084015, 0.0622720830142498, 0.06167743727564812, 0.06109416484832764, 0.06052194535732269, 0.05996045097708702, 0.059409402310848236, 0.05886848270893097, 0.05833742767572403, 0.05781596153974533, 0.05730381980538368, 0.056800756603479385, 0.05630652979016304, 0.05582091212272644, 0.05534365773200989, 0.05487455800175667, 0.05441341921687126, 0.05396000295877457, 0.05351414158940315, 0.053075648844242096, 0.052644334733486176, 0.05222000926733017, 0.05180253088474274, 0.05139169096946716, 0.050987374037504196, 0.05058939382433891, 0.05019763112068176, 0.04981191083788872, 0.04943211376667023, 0.04905809089541435, 0.04868970066308975, 0.04832683503627777, 0.04796937480568886, 0.04761717468500137, 0.04727013036608696, 0.046928148716688156, 0.046591076999902725, 0.046258844435214996, 0.04593133553862572, 0.045608438551425934, 0.045290082693099976, 0.044976137578487396, 0.04466654732823372, 0.04436120018362999, 0.04406002163887024, 0.04376290738582611, 0.043469786643981934, 0.043180570006370544, 0.042895182967185974, 0.042613573372364044, 0.0423356257379055, 0.04206128418445587, 0.04179048910737038, 0.04152318462729454, 0.041259266436100006, 0.040998686105012894, 0.04074139520525932, 0.04048732668161392, 0.040236398577690125, 0.039988573640584946, 0.03974378481507301, 0.039501968771219254, 0.03926309943199158, 0.03902710601687431, 0.03879392519593239, 0.03856353089213371, 0.038335852324962616, 0.038110848516225815, 0.03788847476243973, 0.03766869008541107, 0.03745144233107567, 0.03723669424653053, 0.03702438995242119, 0.03681449592113495, 0.03660697489976883, 0.03640177845954895, 0.036198876798152924, 0.035998232662677765, 0.03579980134963989, 0.03560354933142662, 0.035409435629844666, 0.035217419266700745, 0.03502750024199486, 0.03483960032463074, 0.034653712064027786, 0.03446980565786362, 0.034287840127944946, 0.03410777449607849, 0.033929597586393356, 0.033753279596567154, 0.0335787832736969, 0.03340607509016991, 0.03323514759540558, 0.03306595981121063, 0.03289847820997238, 0.03273269534111023, 0.03256857767701149, 0.032406099140644073, 0.0322452187538147, 0.03208594769239426, 0.03192823752760887, 0.031772054731845856, 0.031617421656847, 0.031464263796806335, 0.03131258487701416, 0.031162375584244728, 0.03101358562707901, 0.030866215005517006, 0.03072025254368782, 0.03057565540075302, 0.030432408675551414, 0.030290512368083, 0.030149927362799644, 0.030010638758540154, 0.029872631654143333, 0.029735885560512543, 0.029600396752357483, 0.029466135427355766, 0.029333079233765602, 0.02920122817158699, 0.02907055802643299, 0.02894105762243271, 0.028812691569328308, 0.028685469180345535, 0.02855936996638775, 0.028434377163648605, 0.028310470283031464, 0.028187651187181473, 0.0280658770352602, 0.027945155277848244, 0.027825474739074707, 0.0277068130671978, 0.027589164674282074, 0.02747250720858574, 0.0273568257689476, 0.027242114767432213, 0.027128372341394424, 0.02701556868851185, 0.026903703808784485, 0.026792753487825394, 0.026682719588279724, 0.02657359652221203, 0.026465341448783875, 0.02635798044502735, 0.02625148370862007, 0.02614584192633629, 0.02604104019701481, 0.02593708597123623, 0.02583394944667816, 0.0257316492497921, 0.025630144402384758, 0.025529442355036736, 0.02542952261865139, 0.02533038891851902, 0.025232018902897835, 0.025134418159723282, 0.02503756247460842, 0.024941453710198402, 0.02484607696533203, 0.024751434102654457, 0.024657506495714188, 0.024564284831285477, 0.02447177842259407, 0.02437996119260788, 0.024288825690746307, 0.024198371917009354, 0.02410859800875187, 0.024019470438361168, 0.02393101155757904, 0.023843200877308846, 0.023756034672260284, 0.02366950735449791, 0.02358359843492508, 0.02349831536412239, 0.02341364696621895, 0.023329583927989006, 0.023246141150593758, 0.023163264617323875, 0.023080989718437195, 0.022999301552772522, 0.022918183356523514, 0.022837644442915916, 0.022757668048143387, 0.022678246721625328, 0.02259938232600689, 0.022521063685417175, 0.022443287074565887, 0.022366054356098175, 0.0222893375903368, 0.022213155403733253, 0.02213749848306179, 0.02206234261393547, 0.02198770083487034, 0.021913563832640648, 0.02183992601931095, 0.0217667818069458, 0.021694118157029152, 0.02162194810807705, 0.0215502567589283, 0.021479027345776558, 0.021408285945653915, 0.021338002756237984, 0.021268177777528763, 0.02119881473481655, 0.021129891276359558, 0.02106141857802868, 0.020993396639823914, 0.02092580311000347, 0.020858652889728546, 0.020791923627257347, 0.02072562277317047, 0.020659752190113068, 0.020594289526343346, 0.02052924782037735, 0.020464608445763588, 0.020400382578372955, 0.02033654972910881, 0.020273126661777496, 0.020210087299346924, 0.020147452130913734, 0.02008519321680069, 0.020023318007588387, 0.019961828365921974, 0.019900711253285408, 0.019839977845549583, 0.019779611378908157, 0.019719600677490234, 0.01965995691716671, 0.019600683823227882, 0.01954176276922226, 0.01948319748044014, 0.01942497305572033, 0.019367104396224022, 0.019309576600790024, 0.019252397119998932, 0.019195545464754105, 0.019139036536216736, 0.01908285543322563, 0.01902700588107109, 0.018971487879753113, 0.018916286528110504, 0.018861401826143265, 0.01880684122443199, 0.018752597272396088, 0.01869867369532585, 0.018645040690898895, 0.01859172433614731, 0.01853870414197445, 0.01848599687218666, 0.0184335820376873, 0.018381472676992416, 0.018329650163650513, 0.018278125673532486, 0.01822689361870289, 0.018175937235355377, 0.0181252621114254, 0.01807487942278385, 0.018024779856204987, 0.01797494851052761, 0.01792539469897747, 0.017876114696264267, 0.0178271122276783, 0.017778366804122925, 0.017729882150888443, 0.017681676894426346, 0.017633728682994843, 0.01758604124188423, 0.017538612708449364, 0.017491435632109642, 0.017444506287574768, 0.017397843301296234, 0.017351416870951653, 0.01730523258447647, 0.017259307205677032, 0.017213625833392143, 0.017168192192912102, 0.017122982069849968, 0.017078010365366936, 0.017033280804753304, 0.016988782212138176, 0.016944529488682747, 0.01690048538148403, 0.016856681555509567, 0.016813097521662712, 0.016769759356975555, 0.016726627945899963, 0.01668372191488743, 0.01664102077484131, 0.016598554328083992, 0.016556303948163986, 0.016514264047145844, 0.016472432762384415, 0.016430824995040894, 0.016389409080147743, 0.0163482204079628, 0.016307227313518524, 0.01626645401120186, 0.016225868836045265, 0.016185499727725983, 0.016145318746566772, 0.016105342656373978, 0.01606556586921215, 0.016025977209210396, 0.015986597165465355, 0.015947403386235237, 0.015908408910036087, 0.015869593247771263, 0.015830975025892258, 0.015792537480592728, 0.01575428992509842, 0.015716219320893288, 0.01567832939326763, 0.01564064435660839, 0.015603124164044857, 0.015565778128802776, 0.015528624877333641, 0.01549164392054081, 0.01545484084635973, 0.01541820727288723, 0.015381750650703907, 0.015345468185842037, 0.015309352427721024, 0.01527340803295374, 0.015237616375088692, 0.015202010050415993, 0.015166568569839, 0.015131289139389992, 0.015096166171133518, 0.0150612136349082, 0.015026427805423737, 0.014991790056228638, 0.014957324601709843, 0.014923018403351307, 0.014888865873217583, 0.01485486887395382, 0.014821025542914867, 0.014787348918616772, 0.014753805473446846, 0.014720415696501732, 0.014687180519104004, 0.014654100872576237, 0.01462116464972496, 0.014588368125259876, 0.014555740170180798, 0.014523230493068695, 0.014490890316665173, 0.014458680525422096, 0.014426631852984428, 0.014394722878932953, 0.014362944290041924, 0.01433132030069828, 0.01429982203990221, 0.014268457889556885, 0.014237234368920326, 0.014206149615347385, 0.014175190590322018, 0.014144386164844036, 0.014113698154687881, 0.014083152636885643, 0.014052736572921276, 0.014022455550730228, 0.013992296531796455, 0.013962272554636002, 0.013932373374700546, 0.013902622275054455, 0.013872980140149593, 0.013843467459082603, 0.013814077712595463, 0.01378481462597847, 0.013755671679973602, 0.013726655393838882, 0.013697751797735691, 0.01366897951811552, 0.013640315271914005, 0.01361178606748581, 0.013583367690443993, 0.013555066660046577, 0.013526885770261288, 0.01349882036447525, 0.013470884412527084, 0.013443049974739552, 0.013415336608886719, 0.013387740589678288, 0.013360254466533661, 0.013332877308130264, 0.013305635191500187, 0.013278481550514698, 0.013251448050141335, 0.013224517926573753, 0.013197695836424828, 0.013170987367630005, 0.013144386000931263, 0.013117888942360878, 0.013091490603983402, 0.013065210543572903, 0.01303903479129076, 0.013012951239943504, 0.012986983172595501, 0.012961126863956451, 0.012935347855091095, 0.012909691780805588, 0.012884140014648438, 0.012858685106039047, 0.012833324261009693, 0.012808071449398994, 0.012782922945916653, 0.012757867574691772, 0.012732910923659801, 0.012708064168691635, 0.012683290988206863, 0.012658625841140747, 0.012634054757654667, 0.012609578669071198, 0.012585198506712914, 0.012560906819999218, 0.012536711990833282, 0.012512611225247383, 0.012488599866628647, 0.012464679777622223, 0.012440850958228111, 0.012417115271091461, 0.012393467128276825, 0.01236991211771965, 0.012346451170742512, 0.012323069386184216, 0.012299779802560806, 0.012276582419872284, 0.012253474444150925, 0.012230447493493557, 0.01220751740038395, 0.012184670194983482, 0.012161901220679283, 0.01213922630995512, 0.012116632424294949, 0.012094126082956791, 0.012071695178747177, 0.012049359269440174, 0.012027101591229439, 0.012004919350147247, 0.011982819996774197, 0.011960810050368309, 0.011938877403736115, 0.011917012743651867, 0.01189524307847023, 0.011873540468513966, 0.011851922608911991, 0.011830383911728859, 0.01180893275886774, 0.011787539348006248, 0.011766238138079643, 0.011745008639991283, 0.011723853647708893, 0.01170278713107109, 0.011681786738336086, 0.011660866439342499, 0.011640023440122604, 0.011619243770837784, 0.011598551645874977, 0.01157793402671814, 0.011557374149560928, 0.011536904610693455, 0.011516503058373928, 0.011496172286570072, 0.011475921608507633, 0.011455731466412544, 0.011435611173510551, 0.011415582150220871, 0.011395602487027645, 0.011375694535672665, 0.01135585643351078, 0.011336083523929119, 0.011316383257508278, 0.011296744458377361, 0.011277178302407265, 0.011257678270339966, 0.011238238774240017, 0.011218883097171783, 0.011199580505490303, 0.01118034590035677, 0.011161179281771183, 0.011142078787088394, 0.011123034171760082, 0.011104064993560314, 0.01108515728265047, 0.011066317558288574, 0.01104754488915205, 0.011028826236724854, 0.0110101830214262, 0.01099159475415945, 0.010973077267408371, 0.010954611003398895, 0.01093621738255024, 0.010917886160314083, 0.010899608954787254, 0.010881399735808372, 0.010863247327506542, 0.010845160111784935, 0.010827148333191872, 0.010809175670146942, 0.010791275650262833, 0.010773427784442902, 0.010755636729300022, 0.010737907141447067, 0.010720236226916313, 0.010702623054385185, 0.010685062035918236, 0.010667573660612106, 0.010650125332176685, 0.010632737539708614, 0.010615409351885319, 0.010598130524158478, 0.010580918751657009, 0.010563752613961697, 0.010546651668846607, 0.010529591701924801, 0.010512597858905792, 0.010495648719370365, 0.010478755459189415, 0.01046192366629839, 0.010445140302181244, 0.010428410954773426, 0.010411742143332958, 0.010395115241408348, 0.010378550738096237, 0.010362026281654835, 0.01034557819366455, 0.010329164564609528, 0.010312809608876705, 0.010296506807208061, 0.010280255228281021, 0.01026405580341816, 0.010247906669974327, 0.010231805965304375, 0.010215753689408302, 0.01019976008683443, 0.010183824226260185, 0.010167925618588924, 0.010152066126465797, 0.010136292316019535, 0.010120546445250511, 0.010104848071932793, 0.01008920930325985, 0.010073610581457615, 0.010058061219751835, 0.010042560286819935, 0.010027103126049042, 0.010011697188019753, 0.009996342472732067, 0.009981030598282814, 0.009965762495994568, 0.009950540028512478, 0.009935375303030014, 0.009920244105160236, 0.009905153885483742, 0.00989012885838747, 0.009875130839645863, 0.009860186837613583, 0.00984528660774231, 0.009830429218709469, 0.009815610945224762, 0.009800847619771957, 0.009786119684576988, 0.00977144856005907, 0.00975680910050869, 0.00974221620708704, 0.009727670811116695, 0.009713170118629932, 0.009698702953755856, 0.009684288874268532, 0.009669915772974491, 0.00965557899326086, 0.00964128877967596, 0.009627040475606918, 0.00961282942444086, 0.009598658420145512, 0.009584545157849789, 0.009570457972586155, 0.009556428529322147, 0.009542430751025677, 0.009528476744890213, 0.00951455906033516, 0.009500687010586262, 0.009486845694482327, 0.009473067708313465, 0.009459313005208969, 0.009445608593523502, 0.009431927464902401, 0.00941829476505518, 0.009404707700014114, 0.009391160681843758, 0.009377644397318363, 0.009364182129502296, 0.009350746870040894, 0.00933736003935337, 0.009324000217020512, 0.009310691617429256, 0.009297401644289494, 0.00928416382521391, 0.009270966984331608, 0.009257792495191097, 0.009244668297469616, 0.009231572970747948, 0.009218519553542137, 0.009205501526594162, 0.009192511439323425, 0.009179568849503994, 0.009166655130684376, 0.009153790771961212, 0.00914094503968954, 0.0091281458735466, 0.009115377441048622, 0.009102646261453629, 0.009089949540793896, 0.009077288210391998, 0.009064658544957638, 0.009052070789039135, 0.009039511904120445, 0.009026985615491867, 0.00901450589299202, 0.009002056904137135, 0.008989628404378891, 0.008977248333394527, 0.008964898064732552, 0.008952583186328411, 0.00894029438495636, 0.008928051218390465, 0.008915829472243786, 0.008903641253709793, 0.008891492150723934, 0.008879383094608784, 0.008867292664945126, 0.0088552450761199, 0.008843227289617062, 0.008831238374114037, 0.0088192792609334, 0.00880736205726862, 0.008795462548732758, 0.008783616125583649, 0.008771789260208607, 0.00875999964773655, 0.008748234249651432, 0.008736498653888702, 0.008724815212190151, 0.008713137358427048, 0.00870150700211525, 0.008689898066222668, 0.008678330108523369, 0.008666795678436756, 0.008655278943479061, 0.008643806912004948, 0.008632354438304901, 0.008620933629572392, 0.008609545417129993, 0.008598193526268005, 0.008586866781115532, 0.00857557449489832, 0.00856431107968092, 0.008553066290915012, 0.00854188296943903, 0.008530696853995323, 0.0085195517167449, 0.008508438244462013, 0.00849735178053379, 0.008486300706863403, 0.008475268259644508, 0.008464280515909195, 0.008453297428786755, 0.008442363701760769, 0.008431445807218552, 0.008420557714998722, 0.008409702219069004, 0.008398869074881077, 0.008388069458305836, 0.008377295918762684, 0.008366545662283897, 0.008355831727385521, 0.008345132693648338, 0.008334473706781864, 0.008323834277689457, 0.008313219994306564, 0.008302636444568634, 0.008292073383927345, 0.008281546644866467, 0.008271039463579655, 0.00826056208461523, 0.008250114507973194, 0.00823968555778265, 0.008229285478591919, 0.00821891613304615, 0.008208568207919598, 0.008198249153792858, 0.00818795058876276, 0.008177685551345348, 0.008167429827153683, 0.008157218806445599, 0.008147021755576134, 0.008136851713061333, 0.00812671147286892, 0.008116597309708595, 0.008106500841677189, 0.00809643417596817, 0.00808639731258154, 0.008076366037130356, 0.008066377602517605, 0.008056405000388622, 0.008046472445130348, 0.008036535233259201, 0.008026642724871635, 0.00801677256822586, 0.008006924763321877, 0.007997103035449982, 0.00798730831593275, 0.007977524772286415, 0.007967781275510788, 0.007958047091960907, 0.007948347367346287, 0.007938667200505733, 0.00792901124805212, 0.007919371128082275, 0.007909778505563736, 0.007900181226432323, 0.007890617474913597, 0.007881076075136662, 0.007871560752391815, 0.007862064987421036, 0.007852593436837196, 0.007843147031962872, 0.007833724841475487, 0.007824317552149296, 0.007814938202500343, 0.007805581670254469, 0.0077962446957826614, 0.007786931935697794, 0.007777645718306303, 0.007768371608108282, 0.007759136147797108, 0.007749906741082668, 0.007740712724626064, 0.00773153081536293, 0.007722381502389908, 0.007713246159255505, 0.007704134564846754, 0.007695045322179794, 0.007685979828238487, 0.007676927372813225, 0.007667903788387775, 0.00765890022739768, 0.007649928797036409, 0.007640963885933161, 0.007632033433765173, 0.007623111829161644, 0.0076142167672514915, 0.007605339400470257, 0.007596494629979134, 0.007587661035358906, 0.007578848395496607, 0.007570060435682535, 0.007561282720416784, 0.007552536204457283, 0.007543810643255711, 0.007535101845860481, 0.007526407018303871, 0.007517742458730936, 0.007509091403335333, 0.00750045757740736, 0.00749184750020504, 0.007483258377760649, 0.0074746813625097275, 0.007466130889952183, 0.007457602769136429, 0.0074490890838205814, 0.007440594024956226, 0.007432121783494949, 0.007423659786581993, 0.007415228057652712, 0.007406814023852348, 0.007398413494229317, 0.007390039041638374, 0.0073816776275634766, 0.00737333670258522, 0.007365015335381031, 0.007356700953096151, 0.007348412182182074, 0.007340153679251671, 0.0073319124057888985, 0.007323676720261574, 0.007315460592508316, 0.007307269610464573, 0.007299093063920736, 0.007290935609489679, 0.007282801903784275, 0.007274670526385307, 0.007266576401889324, 0.0072584873996675014, 0.007250417955219746, 0.007242375984787941, 0.00723434379324317, 0.0072263265028595924, 0.007218333892524242, 0.007210352923721075, 0.0072023929096758366, 0.007194451056420803, 0.007186520844697952, 0.007178615313023329, 0.007170721888542175, 0.007162848487496376, 0.007154995109885931, 0.007147153839468956, 0.007139327470213175, 0.007131523452699184, 0.007123734336346388, 0.007115961983799934, 0.007108209189027548, 0.00710047222673893, 0.00709275109693408, 0.007085044402629137, 0.007077352609485388, 0.007069683168083429, 0.007062026299536228, 0.007054388057440519, 0.007046771701425314, 0.007039153948426247, 0.007031569257378578, 0.007024005055427551, 0.007016440853476524, 0.007008907850831747, 0.007001371588557959, 0.006993868853896856, 0.006986378226429224, 0.006978901568800211, 0.006971440277993679, 0.006963989697396755, 0.006956565193831921, 0.006949152797460556, 0.006941754836589098, 0.006934370379894972, 0.006927005480974913, 0.006919649429619312, 0.00691232131794095, 0.006904997862875462, 0.006897692568600178, 0.006890406832098961, 0.0068831308744847775, 0.006875867955386639, 0.006868631113320589, 0.006861405447125435, 0.006854191422462463, 0.006846996955573559, 0.006839805748313665, 0.006832651328295469, 0.006825484801083803, 0.00681835412979126, 0.006811228580772877, 0.006804130505770445, 0.006797031965106726, 0.006789958570152521, 0.00678289495408535, 0.006775849498808384, 0.0067688170820474625, 0.0067617930471897125, 0.006754789501428604, 0.006747799459844828, 0.006740829441696405, 0.0067338645458221436, 0.0067269206047058105, 0.00671999529004097, 0.006713078822940588, 0.006706177722662687, 0.006699288263916969, 0.006692416034638882, 0.006685548461973667, 0.00667871069163084, 0.006671878509223461, 0.006665067747235298, 0.006658259779214859, 0.006651477422565222, 0.0066447025164961815, 0.006637943908572197, 0.006631198339164257, 0.006624465808272362, 0.006617764011025429, 0.006611051503568888, 0.006604357156902552, 0.00659768283367157, 0.006591021548956633, 0.006584377959370613, 0.006577745079994202, 0.0065711187198758125, 0.006564512383192778, 0.006557926069945097, 0.006551347207278013, 0.0065447743982076645, 0.006538227666169405, 0.006531683728098869, 0.006525161676108837, 0.006518653593957424, 0.006512152496725321, 0.006505663972347975, 0.006499183364212513, 0.006492726970463991, 0.006486285477876663, 0.006479848176240921, 0.006473428104072809, 0.006467009894549847, 0.006460616365075111, 0.006454231683164835, 0.006447855848819017, 0.006441492587327957, 0.006435150280594826, 0.006428818218410015, 0.006422500591725111, 0.0064161852933466434, 0.006409894675016403, 0.00640359940007329, 0.006397326476871967, 0.006391067057847977, 0.006384817883372307, 0.006378581747412682, 0.006372362375259399, 0.006366144400089979, 0.006359945051372051, 0.006353757344186306, 0.00634758872911334, 0.006341420579701662, 0.006335269659757614, 0.006329124793410301, 0.006323000881820917, 0.006316883955150843, 0.006310780066996813, 0.006304674781858921, 0.006298597902059555, 0.006292534060776234, 0.006286469753831625, 0.006280425935983658, 0.006274391897022724, 0.0062683699652552605, 0.006262357346713543, 0.00625635264441371, 0.006250367034226656, 0.006244397722184658, 0.006238419562578201, 0.00623246468603611, 0.006226527038961649, 0.006220594514161348, 0.006214665714651346, 0.006208760663866997, 0.006202866323292255, 0.006196971982717514, 0.006191100459545851, 0.0061852335929870605, 0.006179377902299166, 0.006173540838062763, 0.0061677005141973495, 0.006161878816783428, 0.006156077608466148, 0.006150275003165007, 0.006144484970718622, 0.006138714030385017, 0.006132945418357849, 0.0061271898448467255, 0.006121443118900061, 0.006115708965808153, 0.006109983194619417, 0.006104275118559599, 0.006098574493080378, 0.006092878058552742, 0.006087201647460461, 0.006081533618271351, 0.006075863726437092, 0.006070215255022049, 0.006064583547413349, 0.006058948114514351, 0.006053332705050707, 0.006047731731086969, 0.006042126566171646, 0.006036539562046528, 0.006030960474163294, 0.006025394890457392, 0.006019837688654661, 0.006014289800077677, 0.0060087586753070354, 0.0060032266192138195, 0.005997713189572096, 0.0059922123327851295, 0.0059867138043046, 0.005981224589049816, 0.005975754931569099, 0.005970277823507786, 0.005964819807559252, 0.005959382280707359, 0.0059539503417909145, 0.00594851840287447, 0.005943107418715954, 0.005937708541750908, 0.005932298488914967, 0.00592691358178854, 0.005921542644500732, 0.005916171707212925, 0.005910817999392748, 0.005905468948185444, 0.005900128278881311, 0.00589480297639966, 0.005889481399208307, 0.005884159822016954, 0.0058788699097931385, 0.005873576272279024, 0.005868298467248678, 0.005863024387508631, 0.0058577642776072025, 0.005852504167705774, 0.005847269669175148, 0.005842023994773626, 0.005836799740791321, 0.005831591319292784, 0.005826386157423258, 0.005821180995553732, 0.005816005636006594, 0.005810820963233709, 0.005805652588605881, 0.005800487939268351, 0.005795335862785578, 0.005790191702544689, 0.005785058252513409, 0.005779941566288471, 0.0057748244144022465, 0.0057697175070643425, 0.005764626432210207, 0.005759526509791613, 0.005754453130066395, 0.005749385338276625, 0.0057443189434707165, 0.005739267915487289, 0.005734228994697332, 0.005729195661842823, 0.005724175367504358, 0.005719155538827181, 0.0057141417637467384, 0.005709141492843628, 0.005704149603843689, 0.005699170753359795, 0.005694202147424221, 0.005689234007149935, 0.005684277042746544, 0.005679322872310877, 0.00567438080906868, 0.005669455975294113, 0.005664539989084005, 0.005659622605890036, 0.005654714535921812, 0.0056498064659535885, 0.005644924007356167, 0.005640046671032906, 0.005635174456983805, 0.005630312487483025, 0.005625460296869278, 0.0056206099689006805, 0.005615769419819117, 0.005610944237560034, 0.005606110207736492, 0.0056013073772192, 0.005596510600298643, 0.005591703578829765, 0.005586917977780104, 0.005582140292972326, 0.005577368661761284, 0.005572600290179253, 0.005567850545048714, 0.0055630989372730255, 0.005558360368013382, 0.005553624592721462, 0.005548907443881035, 0.005544192157685757, 0.0055394768714904785, 0.005534785334020853, 0.005530092865228653, 0.005525416228920221, 0.005520735401660204, 0.0055160666815936565, 0.005511409603059292, 0.005506751127541065, 0.005502108950167894, 0.005497486796230078, 0.005492856726050377, 0.005488222930580378, 0.005483622662723064, 0.005479016341269016, 0.005474422127008438, 0.005469826515763998, 0.005465254653245211, 0.005460682325065136, 0.0054561118595302105, 0.005451558157801628, 0.005447012837976217, 0.0054424721747636795, 0.005437937565147877, 0.0054334234446287155, 0.005428884644061327, 0.005424382630735636, 0.00541987968608737, 0.005415388382971287, 0.005410896148532629, 0.005406424403190613, 0.005401948466897011, 0.00539748091250658, 0.005393031053245068, 0.005388566758483648, 0.005384128075093031, 0.005379693582653999, 0.00537527073174715, 0.005370853003114462, 0.005366436671465635, 0.005362031050026417, 0.005357644986361265, 0.005353246815502644, 0.005348869599401951, 0.005344492848962545, 0.00534012308344245, 0.005335765890777111, 0.005331411492079496, 0.00532706780359149, 0.005322725046426058, 0.005318397656083107, 0.005314073525369167, 0.005309766624122858, 0.0053054471500217915, 0.005301150493323803, 0.005296857561916113, 0.00529256509616971, 0.005288287997245789, 0.005284017883241177, 0.005279744043946266, 0.0052754865027964115, 0.005271235015243292, 0.005266985855996609, 0.0052627455443143845, 0.005258512683212757, 0.005254288204014301, 0.005250072572380304, 0.0052458541467785835, 0.005241646897047758, 0.005237448029220104, 0.005233259405940771, 0.0052290731109678745, 0.005224897991865873, 0.0052207279950380325, 0.005216555204242468, 0.005212402902543545, 0.005208251066505909, 0.0052040982991456985, 0.005199959967285395, 0.005195829086005688, 0.005191700533032417, 0.005187581293284893, 0.0051834662444889545, 0.005179364234209061, 0.005175260826945305, 0.005171166732907295, 0.005167079158127308, 0.00516300555318594, 0.005158929619938135, 0.005154858343303204, 0.005150794517248869, 0.0051467507146298885, 0.005142691545188427, 0.005138645879924297, 0.005134621635079384, 0.005130586680024862, 0.005126559641212225, 0.005122544709593058, 0.005118531174957752, 0.0051145292818546295, 0.005110536236315966, 0.005106537137180567, 0.005102549679577351, 0.005098577588796616, 0.005094596184790134, 0.005090631078928709, 0.005086671095341444, 0.005082720424979925, 0.00507876044139266, 0.005074827466160059, 0.005070884246379137, 0.005066949874162674, 0.005063030868768692, 0.0050591095350682735, 0.0050552012398839, 0.005051286891102791, 0.005047392100095749, 0.005043498706072569, 0.005039608106017113, 0.005035726353526115, 0.00503184599801898, 0.0050279865972697735, 0.005024113692343235, 0.005020256619900465, 0.005016403738409281, 0.0050125508569180965, 0.005008709616959095, 0.0050048744305968285, 0.005001053214073181, 0.004997221753001213, 0.0049933986738324165, 0.004989601206034422, 0.004985798615962267, 0.00498198764398694, 0.00497819110751152, 0.004974403418600559, 0.0049706194549798965, 0.00496684480458498, 0.004963070619851351, 0.0049593085423111916, 0.00495555205270648, 0.004951791372150183, 0.004948044195771217, 0.004944306798279285, 0.00494055962190032, 0.0049368287436664104, 0.004933102056384087, 0.004929375369101763, 0.004925672430545092, 0.0049219559878110886, 0.004918253049254417, 0.004914553835988045, 0.00491086533293128, 0.004907181952148676, 0.0049034953117370605, 0.004899811930954456, 0.004896145313978195, 0.004892486147582531, 0.004888809751719236, 0.004885162226855755, 0.004881523549556732, 0.004877867177128792, 0.004874227102845907, 0.004870608914643526, 0.004866969771683216, 0.004863359499722719, 0.0048597343266010284, 0.004856116138398647, 0.004852514714002609, 0.004848916549235582, 0.004845325835049152, 0.004841725341975689, 0.004838145803660154, 0.004834564868360758, 0.004830995108932257, 0.004827428609132767, 0.004823857918381691, 0.004820303991436958, 0.004816750064492226, 0.004813203122466803, 0.0048096622340381145, 0.004806118551641703, 0.004802593495696783, 0.004799061454832554, 0.00479554571211338, 0.0047920201905071735, 0.004788513295352459, 0.00478500546887517, 0.004781506489962339, 0.004778003320097923, 0.004774508997797966, 0.004771034233272076, 0.004767553880810738, 0.004764073062688112, 0.004760598763823509, 0.0047571416944265366, 0.004753674380481243, 0.004750218242406845, 0.004746775142848492, 0.004743324592709541, 0.004739878699183464, 0.004736447241157293, 0.0047330111265182495, 0.004729589447379112, 0.0047261668369174, 0.0047227549366652966, 0.004719341639429331, 0.004715931136161089, 0.00471253227442503, 0.004709131550043821, 0.004705744795501232, 0.004702357575297356, 0.004698978271335363, 0.004695598967373371, 0.004692218732088804, 0.004688865039497614, 0.004685496911406517, 0.004682138096541166, 0.004678794182837009, 0.0046754442155361176, 0.0046720951795578, 0.004668761044740677, 0.00466542411595583, 0.00466209277510643, 0.004658769816160202, 0.00465544406324625, 0.00465213181450963, 0.004648829344660044, 0.004645520355552435, 0.004642218817025423, 0.004638929385691881, 0.004635631572455168, 0.004632351454347372, 0.004629063419997692, 0.004625784698873758, 0.004622514359652996, 0.004619238432496786, 0.004615978337824345, 0.004612721502780914, 0.0046094683930277824, 0.004606213420629501, 0.004602967295795679, 0.004599733278155327, 0.004596492275595665, 0.0045932685025036335, 0.004590036813169718, 0.004586820490658283, 0.00458359532058239, 0.004580385517328978, 0.004577173851430416, 0.004573964513838291, 0.004570768214762211, 0.004567568190395832, 0.004564371891319752, 0.004561194684356451, 0.004558010026812553, 0.004554837476462126, 0.004551658406853676, 0.004548491910099983, 0.004545321688055992, 0.00454216543585062, 0.004539003595709801, 0.004535853397101164, 0.004532709252089262, 0.004529571160674095, 0.004526419099420309, 0.004523288458585739, 0.00452016107738018, 0.004517039749771357, 0.004513923544436693, 0.004510801285505295, 0.004507682751864195, 0.004504579119384289, 0.00450146896764636, 0.004498376976698637, 0.004495282657444477, 0.004492189269512892, 0.004489099606871605, 0.004486015532165766, 0.004482931923121214, 0.004479861818253994, 0.004476784262806177, 0.004473729524761438, 0.004470666870474815, 0.004467600490897894, 0.0044645508751273155, 0.004461502656340599, 0.004458462353795767, 0.004455415531992912, 0.004452375695109367, 0.004449343308806419, 0.004446316976100206, 0.0044432892464101315, 0.00444027129560709, 0.004437252879142761, 0.004434248432517052, 0.004431235138326883, 0.004428233951330185, 0.004425229504704475, 0.004422229714691639, 0.004419239237904549, 0.004416257608681917, 0.004413270857185125, 0.004410282243043184, 0.004407315980643034, 0.004404345061630011, 0.004401376936584711, 0.004398414399474859, 0.004395452328026295, 0.004392491187900305, 0.004389539826661348, 0.004386590328067541, 0.00438365014269948, 0.004380711819976568, 0.004377778619527817, 0.004374845419079065, 0.004371915943920612, 0.004368987400084734, 0.004366070032119751, 0.004363157320767641, 0.004360240884125233, 0.004357333295047283, 0.004354429896920919, 0.004351525567471981, 0.0043486375361680984, 0.0043457369320094585, 0.004342850763350725, 0.004339957144111395, 0.0043370844796299934, 0.004334202501922846, 0.004331324715167284, 0.0043284534476697445, 0.00432558823376894, 0.004322721157222986, 0.004319870378822088, 0.004317014943808317, 0.00431416928768158, 0.00431131012737751, 0.0043084691278636456, 0.004305627662688494, 0.004302798304706812, 0.004299953579902649, 0.004297131672501564, 0.004294300451874733, 0.004291480407118797, 0.004288668744266033, 0.004285851493477821, 0.004283036570996046, 0.0042802379466593266, 0.0042774309404194355, 0.004274636507034302, 0.004271843936294317, 0.004269039258360863, 0.0042662532068789005, 0.004263469483703375, 0.004260695539414883, 0.004257910419255495, 0.004255139734596014, 0.004252362996339798, 0.0042496006935834885, 0.004246838856488466, 0.004244076553732157, 0.004241325426846743, 0.0042385742999613285, 0.004235823173075914, 0.004233075305819511, 0.004230329301208258, 0.004227601457387209, 0.004224870353937149, 0.0042221322655677795, 0.0042194039560854435, 0.004216685425490141, 0.0042139580473303795, 0.004211234860122204, 0.004208529368042946, 0.004205819219350815, 0.004203109070658684, 0.004200404975563288, 0.004197710659354925, 0.004195008892565966, 0.004192324820905924, 0.004189627710729837, 0.004186946898698807, 0.004184267949312925, 0.004181584808975458, 0.00417891051620245, 0.004176233895123005, 0.004173563327640295, 0.004170895088464022, 0.004168242681771517, 0.004165584221482277, 0.0041629234328866005, 0.004160268232226372, 0.004157631192356348, 0.00415497412905097, 0.004152338951826096, 0.00414970563724637, 0.00414706626906991, 0.0041444264352321625, 0.004141802899539471, 0.004139179363846779, 0.0041365595534443855, 0.00413393834605813, 0.004131323657929897, 0.004128712695091963, 0.004126102663576603, 0.004123499616980553, 0.004120893310755491, 0.004118297714740038, 0.004115699790418148, 0.004113112576305866, 0.004110523033887148, 0.004107933957129717, 0.004105350933969021, 0.004102767910808325, 0.00410020025447011, 0.004097626078873873, 0.004095055628567934, 0.004092490766197443, 0.004089930560439825, 0.004087371286004782, 0.004084801767021418, 0.00408225879073143, 0.004079708829522133, 0.004077162593603134, 0.004074613098055124, 0.004072075709700584, 0.004069541115313768, 0.004066993948072195, 0.004064470995217562, 0.0040619466453790665, 0.004059417173266411, 0.004056899342685938, 0.004054379649460316, 0.004051855765283108, 0.004049350041896105, 0.004046835005283356, 0.00404432462528348, 0.00404182355850935, 0.004039324354380369, 0.004036827478557825, 0.004034343641251326, 0.004031848162412643, 0.004029355943202972, 0.004026869311928749, 0.004024391993880272, 0.004021911416202784, 0.004019427113234997, 0.00401696003973484, 0.004014498088508844, 0.0040120212361216545, 0.004009561147540808, 0.004007095005363226, 0.0040046414360404015, 0.004002185072749853, 0.003999735694378614, 0.003997281659394503, 0.003994845785200596, 0.0039923954755067825, 0.003989954479038715, 0.003987519536167383, 0.003985094837844372, 0.003982651513069868, 0.003980229143053293, 0.003977808635681868, 0.003975386265665293, 0.003972968552261591, 0.003970547113567591, 0.003968134522438049, 0.003965719137340784, 0.003963314462453127, 0.003960914444178343, 0.003958515357226133, 0.003956112079322338, 0.003953714855015278, 0.003951329737901688, 0.003948931582272053, 0.003946543671190739, 0.003944166470319033, 0.003941773436963558, 0.003939406480640173, 0.003937033005058765, 0.0039346604607999325, 0.0039322893135249615, 0.0039299167692661285, 0.0039275577291846275, 0.003925189841538668, 0.0039228410460054874, 0.003920493647456169, 0.003918130416423082, 0.00391578720882535, 0.003913436084985733, 0.003911093343049288, 0.003908755257725716, 0.003906415309756994, 0.003904081182554364, 0.0039017510134726763, 0.0038994168862700462, 0.0038970871828496456, 0.0038947605062276125, 0.003892447566613555, 0.0038901311345398426, 0.0038878126069903374, 0.003885496873408556, 0.003883186262100935, 0.003880887059494853, 0.0038785787764936686, 0.0038762763142585754, 0.0038739782758057117, 0.003871689550578594, 0.0038693943060934544, 0.003867097431793809, 0.0038648112677037716, 0.003862527897581458, 0.003860239638015628, 0.0038579662796109915, 0.0038556938525289297, 0.0038534151390194893, 0.003851146437227726, 0.0038488840218633413, 0.0038466041442006826, 0.0038443508092314005, 0.0038420867640525103, 0.00383983226493001, 0.003837574040517211, 0.0038353290874511003, 0.003833071794360876, 0.003830827074125409, 0.003828583285212517, 0.0038263422902673483, 0.003824104554951191, 0.003821869380772114, 0.0038196356035768986, 0.003817410673946142, 0.0038151752669364214, 0.003812953596934676, 0.0038107316941022873, 0.003808504668995738, 0.0038062878884375095, 0.0038040759973227978, 0.0038018650375306606, 0.0037996619939804077, 0.0037974556908011436, 0.0037952458951622248, 0.0037930470425635576, 0.003790851216763258, 0.0037886514328420162, 0.0037864618934690952, 0.003784267930313945, 0.003782084211707115, 0.003779900958761573, 0.0037777144461870193, 0.003775539342314005, 0.003773351199924946, 0.0037711793556809425, 0.0037690079770982265, 0.0037668340373784304, 0.0037646668497473, 0.003762501524761319, 0.0037603434175252914, 0.003758183214813471, 0.0037560253404080868, 0.0037538735195994377, 0.0037517284508794546, 0.003749563591554761, 0.0037474273703992367, 0.003745279274880886, 0.003743140958249569, 0.003741000546142459, 0.0037388682831078768, 0.0037367427721619606, 0.003734600730240345, 0.0037324661388993263, 0.0037303445860743523, 0.003728220472112298, 0.0037261012475937605, 0.003723978064954281, 0.003721862332895398, 0.003719756845384836, 0.0037176429759711027, 0.003715537255629897, 0.003713421756401658, 0.0037113225553184748, 0.003709223819896579, 0.0037071171682327986, 0.0037050226237624884, 0.0037029392551630735, 0.003700842848047614, 0.003698752261698246, 0.0036966705229133368, 0.0036945862229913473, 0.0036924993619322777, 0.0036904250737279654, 0.0036883431021124125, 0.0036862650886178017, 0.003684196388348937, 0.003682132577523589, 0.0036800571251660585, 0.003677995875477791, 0.0036759248469024897, 0.0036738549824804068, 0.0036718049086630344, 0.0036697506438940763, 0.003667698707431555, 0.0036656439770013094, 0.0036636008881032467, 0.0036615515127778053, 0.003659503534436226, 0.0036574676632881165, 0.0036554252728819847, 0.0036533779930323362, 0.0036513442173600197, 0.0036493095103651285, 0.003647285746410489, 0.0036452533677220345, 0.0036432272754609585, 0.003641207702457905, 0.0036391806788742542, 0.0036371545866131783, 0.003635138040408492, 0.0036331156734377146, 0.003631112864241004, 0.003629101440310478, 0.0036271053832024336, 0.0036250886041671038, 0.003623075783252716, 0.003621078794822097, 0.003619077615439892, 0.0036170827224850655, 0.003615077119320631, 0.0036130857188254595, 0.003611101768910885, 0.0036091154906898737, 0.0036071205977350473, 0.0036051380448043346, 0.0036031478084623814, 0.003601175732910633, 0.003599202958866954, 0.0035972262267023325, 0.0035952541511505842, 0.00359327532351017, 0.003591298358514905, 0.003589337458834052, 0.003587366547435522, 0.0035854089073836803, 0.0035834566224366426, 0.003581494325771928, 0.003579525277018547, 0.0035775804426521063, 0.003575625829398632, 0.0035736828576773405, 0.003571727778762579, 0.0035697827115654945, 0.0035678374115377665, 0.003565895603969693, 0.0035639500711113214, 0.0035620250273495913, 0.003560083219781518, 0.003558150492608547, 0.0035562149714678526, 0.0035542920231819153, 0.0035523567348718643, 0.0035504368133842945, 0.0035485122352838516, 0.003546595573425293, 0.0035446779802441597, 0.0035427603870630264, 0.0035408451221883297, 0.0035389303229749203, 0.003537018783390522, 0.003535109106451273, 0.003533201292157173, 0.0035313009284436703, 0.003529398934915662, 0.003527495777234435, 0.0035255926195532084, 0.003523707389831543, 0.0035218046978116035, 0.0035199164412915707, 0.0035180291160941124, 0.003516140393912792, 0.003514248179271817, 0.003512369003146887, 0.0035104902926832438, 0.0035086097195744514, 0.00350672984495759, 0.0035048555582761765, 0.003502980573102832, 0.0035011086147278547, 0.003499237820506096, 0.0034973653964698315, 0.0034954994916915894, 0.003493637777864933, 0.0034917721059173346, 0.003489923197776079, 0.0034880610182881355, 0.003486201399937272, 0.0034843480680137873, 0.003482497064396739, 0.0034806516487151384, 0.0034788029734045267, 0.0034769601188600063, 0.003475105157122016, 0.0034732650965452194, 0.003471420146524906, 0.0034695849753916264, 0.003467750269919634, 0.0034659230150282383, 0.003464088076725602, 0.0034622522071003914, 0.003460422856733203, 0.0034585981629788876, 0.0034567713737487793, 0.0034549504052847624, 0.003453125711530447, 0.0034513070713728666, 0.0034494956489652395, 0.0034476756118237972, 0.0034458618611097336, 0.003444056725129485, 0.0034422334283590317, 0.003440435277298093, 0.0034386313054710627, 0.003436820115894079, 0.003435020800679922, 0.003433224745094776, 0.003431426826864481, 0.003429633332416415, 0.0034278377424925566, 0.0034260412212461233, 0.0034242537803947926, 0.0034224584233015776, 0.0034206712152808905, 0.0034188912250101566, 0.003417106345295906, 0.0034153240267187357, 0.00341355474665761, 0.0034117656759917736, 0.0034099863842129707, 0.0034082222264260054, 0.0034064408391714096, 0.0034046685323119164, 0.0034028973896056414, 0.003401136491447687, 0.0033993732649832964, 0.003397610504180193, 0.003395848209038377, 0.0033940915018320084, 0.0033923315349966288, 0.003390578320249915, 0.003388826036825776, 0.0033870702609419823, 0.00338532030582428, 0.003383568488061428, 0.0033818252850323915, 0.0033800797536969185, 0.003378335852175951, 0.003376592416316271, 0.003374855499714613, 0.003373126033693552, 0.0033713849261403084, 0.003369644982740283, 0.003367908298969269, 0.0033661862835288048, 0.0033644542563706636, 0.003362729912623763, 0.0033610048703849316, 0.0033592835534363985, 0.0033575627021491528, 0.003355837194249034, 0.003354121930897236, 0.003352406434714794, 0.003350687911733985, 0.003348973346874118, 0.003347266698256135, 0.003345555393025279, 0.003343846881762147, 0.0033421427942812443, 0.003340437775477767, 0.0033387348521500826, 0.003337039379402995, 0.0033353427425026894, 0.00333363632671535, 0.0033319422509521246, 0.0033302498050034046, 0.0033285534009337425, 0.0033268711995333433, 0.0033251759596168995, 0.003323489800095558, 0.0033217985183000565, 0.0033201181795448065, 0.0033184350468218327, 0.003316758666187525, 0.0033150864765048027, 0.0033133989199995995, 0.003311724402010441, 0.0033100515138357878, 0.003308382350951433, 0.0033067038748413324, 0.003305044723674655, 0.00330337998457253, 0.0033017126843333244, 0.0033000472467392683, 0.003298384603112936, 0.0032967214938253164, 0.0032950721215456724, 0.0032934173941612244, 0.0032917545177042484, 0.003290100023150444, 0.003288449952378869, 0.003286802675575018, 0.0032851500436663628, 0.003283509984612465, 0.003281861310824752, 0.0032802210189402103, 0.0032785777002573013, 0.003276936709880829, 0.0032753010746091604, 0.0032736624125391245, 0.0032720190938562155, 0.0032703836914151907, 0.0032687594648450613, 0.0032671287190169096, 0.0032655009999871254, 0.003263872815296054, 0.003262249520048499, 0.0032606327440589666, 0.003259007353335619, 0.003257378237321973, 0.003255759831517935, 0.003254141891375184]\n\n\nThe logistic regression model has been fit perfectly to the training data.\n\nfind_accuracy(X_train, y_train)\n\nAccuracy: 1.0\n\n\nSo we achieved 100% accuracy.\nThen we must initialize the test data with the same parameters as the training data.\n\nX_test, y_test = classification_data(n_points = 50, noise = 0.5, p_dims = 100)\n\n\nfind_accuracy(X_test, y_test)\n\nAccuracy: 1.0\n\n\nWe can see that the logistic regression model has overfit to the training data and cannot classify the test data with the same accuracy. This it the danger of fitting a model too well to training data, as it is now not generalizable to other data."
  },
  {
    "objectID": "posts/post5/homework5.html#conclusion",
    "href": "posts/post5/homework5.html#conclusion",
    "title": " Implementing Logistic Regression ",
    "section": "",
    "text": "In this blog post, I was able to investigate more about gradient descent and its application in solving the empirical risk minimization problem, specifically focusing on logistic regression. By implementing gradient descent in the logistic regression model, I gained a deeper understanding of how the algorithm works and how it can be customized to suit different classification needs.\nFurthermore, I explored a key variant of gradient descent called momentum, which allows logistic regression to achieve faster convergence. Through experiments and analysis, we observed the impact of momentum on the convergence speed on the logistic regression model.\nOverall, these experiments taught me valuable lessons in optimization techniques for machine learning models. Through this experience I learned the importance of different parameters though changing the value of beta, and the impact of overfitting on our training data. By combining theory with practical implementation and experimentation, I gained a comprehensive understanding of gradient descent and its variants in the context of logistic regression.\nAs we continue to learn various machine learning algorithms and optimization techniques, the knowledge and insights gained from this blog post will help me develop practices to build more complex and efficient models in the future."
  },
  {
    "objectID": "posts/post3/homework3.html#data-prep",
    "href": "posts/post3/homework3.html#data-prep",
    "title": " Dissecting racial bias in an algorithm used to manage the health of populations ",
    "section": "1. Data Prep",
    "text": "1. Data Prep\n\npercent_five_cond = (len(df[df[\"gagne_sum_t\"] &lt;= 5])/ len(df)) * 100\npercent_five_cond\n\n95.53952115447689\n\n\n95.5% of patients in the data have five or fewer chronic conditions. Therefore we can justify focusing on these patients as they represent the vast majority of cases.\nLog-transformed the cost by created a column of the data frame that is the logarithm of the cost column. First removed all zero values as log(0) is undefined. Will use this new column as the target variable.\n\nimport numpy as np\n\ndf = df[df[\"cost_t\"] != 0]\ndf[\"log_cost\"] = np.log(df[\"cost_t\"])\n\n/var/folders/g2/ybhd80ns31sc72zl62c5qcjm0000gn/T/ipykernel_64161/702178963.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df[\"log_cost\"] = np.log(df[\"cost_t\"])\n\n\nI created a dummy (one-hot encoded) column for the qualitative race variable in which 0 means that the patient is White and 1 means that the patient is Black.\n\ndf[\"is_black\"] = df[\"race\"] == \"black\"\n\n/var/folders/g2/ybhd80ns31sc72zl62c5qcjm0000gn/T/ipykernel_64161/3239834182.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df[\"is_black\"] = df[\"race\"] == \"black\"\n\n\nI separate the data into predictor variables X and target variable y (the log-cost). For predictor variables, I uses the dummy columns for race and the number of active chronic conditions.\n\nX_train = df[[\"is_black\", \"gagne_sum_t\"]]\ny_train = df[\"log_cost\"]"
  },
  {
    "objectID": "posts/post3/homework3.html#modeling",
    "href": "posts/post3/homework3.html#modeling",
    "title": " Dissecting racial bias in an algorithm used to manage the health of populations ",
    "section": "2. Modeling",
    "text": "2. Modeling\nFunction that will construct data sets with polynomial features of various sizes:\n\ndef add_polynomial_features(X, degree):\n  X_ = X.copy()\n  for j in range(1, degree):\n    X_[f\"poly_{j}\"] = X_[\"gagne_sum_t\"]**j\n  return X_\n\nI trained Linear Regressions on varying numbers of features from 1 to 11, comparing the scores to find that the optimal score is using 10 features: [‘is_black’, ‘gagne_sum_t’, ‘poly_1’, ‘poly_2’, ‘poly_3’, ‘poly_4’,‘poly_5’, ‘poly_6’, ‘poly_7’, ‘poly_8’, ‘poly_9’] to predict log cost.\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\n\nscore = 0\nbest_score = float('-inf')\n\nfor degrees in range(1,11):\n        \n    X_features = add_polynomial_features(X_train, degrees)\n    cols = X_features.columns\n\n    LR = LinearRegression()\n    LR.fit(X_features, y_train)\n    score = cross_val_score(LR, X_features, y_train, cv=5).mean()\n    \n    if (score &gt; best_score):\n        best_score = score\n        best_degrees = degrees\n        best_cols = cols\n\nprint(f\"{best_cols=}\") \nprint(f\"{best_degrees=}\")\n\nbest_cols=Index(['is_black', 'gagne_sum_t', 'poly_1', 'poly_2', 'poly_3', 'poly_4',\n       'poly_5', 'poly_6', 'poly_7', 'poly_8', 'poly_9'],\n      dtype='object')\nbest_degrees=10\n\n\nI then constructed a copy of the data with the correct number of polynomial features and fit a last linear regression model on the optimal features.\n\nX_features = add_polynomial_features(X_train, 10)\nLR = LinearRegression()\nLR.fit(X_features, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\nI determined which coefficients corresponded to each feature of the data.\n\nfeatures = X_features.columns\ncoefs = LR.coef_\n\nfeature_coefs = dict(zip(features, coefs))\nfeature_coefs\n\n{'is_black': -0.26711487503849624,\n 'gagne_sum_t': 0.5088163229433447,\n 'poly_1': 0.5088164579853922,\n 'poly_2': -1.0305677844477263,\n 'poly_3': 0.5880247944191436,\n 'poly_4': -0.1776219992097652,\n 'poly_5': 0.03115568304493425,\n 'poly_6': -0.0032705785216849033,\n 'poly_7': 0.00020192700428754498,\n 'poly_8': -6.7458039893789564e-06,\n 'poly_9': 9.390071161850347e-08}\n\n\nI computed \\(e^{w_b}\\) to find the estimate of the cost incurred by Black patients as a percentage of white patients.\n\nimport math\n\nmath.exp(feature_coefs[\"is_black\"])\n\n0.7655851197936364\n\n\nMy model shows that black patients incur a cost of 76% of that of white patients. This supports the argument of Obermeyer et al. (2019) as it proves that less money is spent on Black patients who have the same level of need. Therefore as the algorithm uses cost as a proxy for need it thus falsely concludes that Black patients are healthier than equally sick White patients. Reformulating the algorithm so that it no longer uses costs as a proxy for needs eliminates the racial bias in predicting who needs extra care."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "Palmer Penguins \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Newton’s Method for Logistic Regression \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Implementing Logistic Regression \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ‘Optimal’ Decision-Making \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Dissecting racial bias in an algorithm used to manage the health of populations \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Implementing the Perceptron Algorithm \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "warmups/warmup0411.html",
    "href": "warmups/warmup0411.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "import torch \nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-v0_8-whitegrid')\nn_points = 100\nx = torch.rand(n_points)\ny = 1*((x + 0.3*(torch.rand(n_points) - 0.5)) &gt; 0.5 )\n\ndef plot_1d_classification_data(x, y, ax):\n    \n    targets = [0, 1]\n    markers = [\"o\" , \",\"]\n    for i in range(2):\n        ix = y == targets[i]\n        ax.scatter(x[ix], torch.zeros_like(x[ix]), s = 40,  c = y[ix], facecolors = \"none\", edgecolors = \"darkgrey\", cmap = \"BrBG\", vmin = -1, vmax = 2, alpha = 0.6, marker = markers[i], )\n    ax.set(xlabel = r\"$x$\")\n    \nfig, ax = plt.subplots(figsize = (10, 1))\nplot_1d_classification_data(x, y, ax)\n\n\nx_space = torch.linspace(0, 1, 1001)\n\n\ndef kernel_classifier(x_space, x, y, gamma):\n    \n    # compute difference between every elem in x_space and x\n    diffs = x_space[:, None] - x\n    \n    prod = y * torch.exp(-gamma * diffs**2)\n    \n    s = torch.sum(prod, dim=1)\n    \n    return s\n\n\ns = kernel_classifier(x_space, x, y, gamma=100)\n\nfig, ax = plt.subplots(2, 1, figsize = (5, 4), height_ratios= (0.8, 0.2))\nax[0].plot(x_space, s, color = \"slategrey\")\nax[0].set(ylabel = \"Kernel score\")\nplot_1d_classification_data(x, y, ax[1])\n\n\ns = kernel_classifier(x_space, x, y, gamma=1)\n\nfig, ax = plt.subplots(2, 1, figsize = (5, 4), height_ratios= (0.8, 0.2))\nax[0].plot(x_space, s, color = \"slategrey\")\nax[0].set(ylabel = \"Kernel score\")\nplot_1d_classification_data(x, y, ax[1])\n\n\ns = kernel_classifier(x_space, x, y, gamma=10000)\n\nfig, ax = plt.subplots(2, 1, figsize = (5, 4), height_ratios= (0.8, 0.2))\nax[0].plot(x_space, s, color = \"slategrey\")\nax[0].set(ylabel = \"Kernel score\")\nplot_1d_classification_data(x, y, ax[1])"
  },
  {
    "objectID": "warmups/warmup0325.html",
    "href": "warmups/warmup0325.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(z):\n    return 1/(1 + np.exp(-z))\n\nz_val = np.linspace(-1, 1, 100)\n\ny = f(z_val)\n\nplt.plot(z_val, y)\n\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "warmups/warmup0317.html",
    "href": "warmups/warmup0317.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "import math\n\ndef mystery_fun(a, epsilon, alpha, maxsteps=100):\n    \n    # start with initial guess \n    x = a\n    \n    # set x'= 0, j'=0\n    x_prime = 1\n    j = 0\n    \n    while(math.fabs(x_prime - x) &gt; epsilon):\n        \n        if j &gt; maxsteps:\n            break\n        \n        x = x_prime\n        \n        x_prime = x - alpha * (x - a/x)\n        \n        j += 1\n    return x\n        \n\n\nx_val = mystery_fun(a = 9, epsilon = 1e-8, alpha = 0.5)\nprint(x_val)\n\n\nx_val = mystery_fun(a = 9, epsilon = 1e-8, alpha = 2000000)\nprint(x_val)"
  }
]